{"version":3,"file":"perfume.umd.min.js","sources":["../src/detect-browser.ts","../src/idle-queue.ts","../src/emulated-performance.ts","../node_modules/first-input-delay/src/first-input-delay.js","../src/performance.ts","../src/perfume.ts"],"sourcesContent":["interface DetectedInfo<N extends string, O, V = null> {\n  readonly name: N;\n  readonly version: V;\n  readonly os: O;\n}\n\nexport class BrowserInfo implements DetectedInfo<Browser, OperatingSystem | null, string> {\n  constructor(\n    public readonly name: Browser,\n    public readonly version: string,\n    public readonly os: OperatingSystem | null) {\n  }\n}\n\nexport class NodeInfo implements DetectedInfo<'node', NodeJS.Platform, string> {\n  public readonly name: 'node' = 'node';\n  public readonly os: NodeJS.Platform = process.platform;\n\n  constructor( public readonly version: string) {\n  }\n}\n\nexport class BotInfo implements DetectedInfo<'bot', null, null> {\n  public readonly bot: true = true; // NOTE: deprecated test name instead\n  public readonly name: 'bot' = 'bot';\n  public readonly version: null = null;\n  public readonly os: null = null;\n}\n\ntype Browser =\n  | 'aol'\n  | 'edge'\n  | 'yandexbrowser'\n  | 'vivaldi'\n  | 'kakaotalk'\n  | 'samsung'\n  | 'chrome'\n  | 'phantomjs'\n  | 'crios'\n  | 'firefox'\n  | 'fxios'\n  | 'opera'\n  | 'ie'\n  | 'bb10'\n  | 'android'\n  | 'ios'\n  | 'safari'\n  | 'facebook'\n  | 'instagram'\n  | 'ios-webview'\n  | 'searchbot';\ntype OperatingSystem =\n  | 'iOS'\n  | 'Android OS'\n  | 'BlackBerry OS'\n  | 'Windows Mobile'\n  | 'Amazon OS'\n  | 'Windows 3.11'\n  | 'Windows 95'\n  | 'Windows 98'\n  | 'Windows 2000'\n  | 'Windows XP'\n  | 'Windows Server 2003'\n  | 'Windows Vista'\n  | 'Windows 7'\n  | 'Windows 8'\n  | 'Windows 8.1'\n  | 'Windows 10'\n  | 'Windows ME'\n  | 'Open BSD'\n  | 'Sun OS'\n  | 'Linux'\n  | 'Mac OS'\n  | 'QNX'\n  | 'BeOS'\n  | 'OS/2'\n  | 'Search Bot';\ntype UserAgentRule = [Browser, RegExp];\ntype UserAgentMatch = [Browser, RegExpExecArray] | false;\ntype OperatingSystemRule = [OperatingSystem, RegExp];\n\n// tslint:disable-next-line:max-line-length\nconst SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nconst SEARCHBOT_OS_REGEX = /(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\\/Teoma)|(ia_archiver)/;\nconst REQUIRED_VERSION_PARTS = 3;\n\nconst userAgentRules: UserAgentRule[] = [\n  ['aol', /AOLShield\\/([0-9\\._]+)/],\n  ['edge', /Edge\\/([0-9\\._]+)/],\n  ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n  ['vivaldi', /Vivaldi\\/([0-9\\.]+)/],\n  ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n  ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n  ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n  ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n  ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n  ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n  ['fxios', /FxiOS\\/([0-9\\.]+)/],\n  ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n  ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)$/],\n  ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n  ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n  ['ie', /MSIE\\s(7\\.0)/],\n  ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n  ['android', /Android\\s([0-9\\.]+)/],\n  ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n  ['safari', /Version\\/([0-9\\._]+).*Safari/],\n  ['facebook', /FBAV\\/([0-9\\.]+)/],\n  ['instagram', /Instagram\\s([0-9\\.]+)/],\n  ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n  ['searchbot', SEARCHBOX_UA_REGEX],\n];\nconst operatingSystemRules: OperatingSystemRule[] = [\n  ['iOS', /iP(hone|od|ad)/],\n  ['Android OS', /Android/],\n  ['BlackBerry OS', /BlackBerry|BB10/],\n  ['Windows Mobile', /IEMobile/],\n  ['Amazon OS', /Kindle/],\n  ['Windows 3.11', /Win16/],\n  ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n  ['Windows 98', /(Windows 98)|(Win98)/],\n  ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n  ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n  ['Windows Server 2003', /(Windows NT 5.2)/],\n  ['Windows Vista', /(Windows NT 6.0)/],\n  ['Windows 7', /(Windows NT 6.1)/],\n  ['Windows 8', /(Windows NT 6.2)/],\n  ['Windows 8.1', /(Windows NT 6.3)/],\n  ['Windows 10', /(Windows NT 10.0)/],\n  ['Windows ME', /Windows ME/],\n  ['Open BSD', /OpenBSD/],\n  ['Sun OS', /SunOS/],\n  ['Linux', /(Linux)|(X11)/],\n  ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n  ['QNX', /QNX/],\n  ['BeOS', /BeOS/],\n  ['OS/2', /OS\\/2/],\n  ['Search Bot', SEARCHBOT_OS_REGEX],\n];\n\nexport function detect(): BrowserInfo | BotInfo | NodeInfo | null {\n  if (typeof navigator !== 'undefined') {\n    return parseUserAgent(navigator.userAgent);\n  }\n\n  return getNodeVersion();\n}\n\nexport function parseUserAgent(ua: string): BrowserInfo | BotInfo | null {\n  // opted for using reduce here rather than Array#first with a regex.test call\n  // this is primarily because using the reduce we only perform the regex\n  // execution once rather than once for the test and for the exec again below\n  // probably something that needs to be benchmarked though\n  const matchedRule: UserAgentMatch =\n    ua !== '' &&\n    userAgentRules.reduce<UserAgentMatch>((matched: UserAgentMatch, [browser, regex]) => {\n      if (matched) {\n        return matched;\n      }\n\n      const uaMatch = regex.exec(ua);\n      return !!uaMatch && [browser, uaMatch];\n    }, false);\n\n  if (!matchedRule) {\n    return null;\n  }\n\n  const [name, match] = matchedRule;\n  if (name === 'searchbot') {\n    return new BotInfo();\n  }\n\n  let version = match[1] && match[1].split(/[._]/).slice(0, 3);\n  if (version) {\n    if (version.length < REQUIRED_VERSION_PARTS) {\n      version = [\n        ...version,\n        ...new Array(REQUIRED_VERSION_PARTS - version.length).fill('0'),\n      ];\n    }\n  } else {\n    version = [];\n  }\n\n  return new BrowserInfo(name, version.join('.'), detectOS(ua));\n}\n\nexport function detectOS(ua: string): OperatingSystem | null {\n  const match = operatingSystemRules.find(([_, regex]) => regex.test(ua));\n  return match ? match[0] : null;\n}\n\nexport function getNodeVersion(): NodeInfo | null {\n  const isNode = typeof process !== 'undefined' && process.version;\n  return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\n","/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @private\n * @return {number} The current date timestamp\n */\nexport const now = () => {\n  return +new Date();\n};\n\ndeclare global {\n  // tslint:disable-next-line:interface-name\n  interface Window {\n    cancelIdleCallback: any;\n    requestIdleCallback: any;\n    safari: any;\n  }\n}\n\nconst supportsRequestIdleCallback_ =\n  typeof window.requestIdleCallback === 'function';\n\n/**\n * A minimal shim of the native IdleDeadline class.\n */\nclass IdleDealine {\n  initTime_: any;\n  /** @param {number} initTime */\n  constructor(initTime: any) {\n    this.initTime_ = initTime;\n  }\n  /** @return {boolean} */\n  get didTimeout() {\n    return false;\n  }\n  /** @return {number} */\n  timeRemaining() {\n    return Math.max(0, 50 - (now() - this.initTime_));\n  }\n}\n\n/**\n * A minimal shim for the requestIdleCallback function. This accepts a\n * callback function and runs it at the next idle period, passing in an\n * object with a `timeRemaining()` method.\n * @private\n * @param {!Function} callback\n * @return {number}\n */\nconst requestIdleCallbackShim = (callback: any) => {\n  const deadline = new IdleDealine(now());\n  return setTimeout(() => callback(deadline), 0);\n};\n\n/**\n * A minimal shim for the  cancelIdleCallback function. This accepts a\n * handle identifying the idle callback to cancel.\n * @private\n * @param {number|null} handle\n */\nconst cancelIdleCallbackShim = (handle: any) => {\n  clearTimeout(handle);\n};\n\n/**\n * The native `requestIdleCallback()` function or `cancelIdleCallbackShim()`\n * .if the browser doesn't support it.\n * @param {!Function} callback\n * @return {number}\n */\nexport const rIC = supportsRequestIdleCallback_\n  ? window.requestIdleCallback\n  : requestIdleCallbackShim;\n\n/**\n * The native `cancelIdleCallback()` function or `cancelIdleCallbackShim()`\n * if the browser doesn't support it.\n * @param {number} handle\n */\nexport const cIC = supportsRequestIdleCallback_\n  ? window.cancelIdleCallback\n  : cancelIdleCallbackShim;\n\n/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @return {!Function}\n */\nconst createQueueMicrotaskViaPromises = () => {\n  return (microtask: any) => {\n    Promise.resolve().then(microtask);\n  };\n};\n\n/**\n * @return {!Function}\n */\nconst createQueueMicrotaskViaMutationObserver = () => {\n  let i = 0;\n  let microtaskQueue: any = [];\n  const observer = new MutationObserver(() => {\n    microtaskQueue.forEach((microtask: any) => microtask());\n    microtaskQueue = [];\n  });\n  const node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return (microtask: any) => {\n    microtaskQueue.push(microtask);\n\n    // Trigger a mutation observer callback, which is a microtask.\n    // tslint:disable-next-line:no-increment-decrement\n    node.data = String(++i % 2);\n  };\n};\n\n/**\n * Queues a function to be run in the next microtask. If the browser supports\n * Promises, those are used. Otherwise it falls back to MutationObserver.\n * Note: since Promise polyfills are popular but not all support microtasks,\n * we check for native implementation rather than a polyfill.\n * @private\n * @param {!Function} microtask\n */\nexport const queueMicrotask =\n  typeof Promise === 'function' &&\n  Promise.toString().indexOf('[native code]') > -1\n    ? createQueueMicrotaskViaPromises()\n    : createQueueMicrotaskViaMutationObserver();\n\nconst DEFAULT_MIN_TASK_TIME = 0;\n\nconst isSafari_ = !!(\n  typeof window.safari === 'object' && window.safari.pushNotification\n);\n\n/**\n * A class wraps a queue of requestIdleCallback functions for two reasons:\n *   1. So other callers can know whether or not the queue is empty.\n *   2. So we can provide some guarantees that the queued functions will\n *      run in unload-type situations.\n */\nexport class IdleQueue {\n  idleCallbackHandle_: any;\n  taskQueue_ = [];\n  isProcessing_ = false;\n  state_ = null;\n  defaultMinTaskTime_: any;\n  ensureTasksRun_: any;\n\n  /**\n   * Creates the IdleQueue instance and adds lifecycle event listeners to\n   * run the queue if the page is hidden (with fallback behavior for Safari).\n   * @param {{\n   *   ensureTasksRun: boolean,\n   *   defaultMinTaskTime: number,\n   * }=} param1\n   */\n  constructor({\n    ensureTasksRun = false,\n    defaultMinTaskTime = DEFAULT_MIN_TASK_TIME,\n  } = {}) {\n    this.idleCallbackHandle_ = null;\n    this.taskQueue_ = [];\n    this.isProcessing_ = false;\n    this.state_ = null;\n    this.defaultMinTaskTime_ = defaultMinTaskTime;\n    this.ensureTasksRun_ = ensureTasksRun;\n\n    // Bind methods\n    this.runTasksImmediately = this.runTasksImmediately.bind(this);\n    this.runTasks_ = this.runTasks_.bind(this);\n    this.onVisibilityChange_ = this.onVisibilityChange_.bind(this);\n\n    if (this.ensureTasksRun_) {\n      addEventListener('visibilitychange', this.onVisibilityChange_, true);\n\n      // Safari does not reliably fire the `pagehide` or `visibilitychange`\n      // events when closing a tab, so we have to use `beforeunload` with a\n      // timeout to check whether the default action was prevented.\n      // - https://bugs.webkit.org/show_bug.cgi?id=151610\n      // - https://bugs.webkit.org/show_bug.cgi?id=151234\n      // NOTE: we only add this to Safari because adding it to Firefox would\n      // prevent the page from being eligible for bfcache.\n      if (isSafari_) {\n        addEventListener('beforeunload', this.runTasksImmediately, true);\n      }\n    }\n  }\n\n  /**\n   * @param {...*} args\n   */\n  pushTask(cb: any) {\n    this.addTask_(Array.prototype.push, cb);\n  }\n\n  /**\n   * @param {...*} args\n   */\n  unshiftTask(cb: any) {\n    this.addTask_(Array.prototype.unshift, cb);\n  }\n\n  /**\n   * Runs all scheduled tasks synchronously.\n   */\n  runTasksImmediately() {\n    // By not passing a deadline, all tasks will be run sync.\n    this.runTasks_();\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasPendingTasks() {\n    return this.taskQueue_.length > 0;\n  }\n\n  /**\n   * Clears all pending tasks for the queue and stops any scheduled tasks\n   * from running.\n   */\n  clearPendingTasks() {\n    this.taskQueue_ = [];\n    this.cancelScheduledRun_();\n  }\n\n  /**\n   * Returns the state object for the currently running task. If no task is\n   * running, null is returned.\n   * @return {?Object}\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * Destroys the instance by unregistering all added event listeners and\n   * removing any overridden methods.\n   */\n  destroy() {\n    this.taskQueue_ = [];\n    this.cancelScheduledRun_();\n\n    if (this.ensureTasksRun_) {\n      removeEventListener('visibilitychange', this.onVisibilityChange_, true);\n\n      // Safari does not reliably fire the `pagehide` or `visibilitychange`\n      // events when closing a tab, so we have to use `beforeunload` with a\n      // timeout to check whether the default action was prevented.\n      // - https://bugs.webkit.org/show_bug.cgi?id=151610\n      // - https://bugs.webkit.org/show_bug.cgi?id=151234\n      // NOTE: we only add this to Safari because adding it to Firefox would\n      // prevent the page from being eligible for bfcache.\n      if (isSafari_) {\n        removeEventListener('beforeunload', this.runTasksImmediately, true);\n      }\n    }\n  }\n\n  /**\n   * @param {!Function} arrayMethod Either the Array.prototype{push|shift}.\n   * @param {!Function} task\n   * @param {{minTaskTime: number}=} param1\n   * @private\n   */\n  addTask_(\n    arrayMethod: any,\n    task: any,\n    { minTaskTime = this.defaultMinTaskTime_ } = {},\n  ) {\n    const state = {\n      time: now(),\n      visibilityState: document.visibilityState,\n    };\n\n    arrayMethod.call(this.taskQueue_, { state, task, minTaskTime });\n\n    this.scheduleTasksToRun_();\n  }\n\n  /**\n   * Schedules the task queue to be processed. If the document is in the\n   * hidden state, they queue is scheduled as a microtask so it can be run\n   * in cases where a macrotask couldn't (like if the page is unloading). If\n   * the document is in the visible state, `requestIdleCallback` is used.\n   * @private\n   */\n  scheduleTasksToRun_() {\n    if (this.ensureTasksRun_ && document.visibilityState === 'hidden') {\n      queueMicrotask(this.runTasks_);\n    } else {\n      if (!this.idleCallbackHandle_) {\n        this.idleCallbackHandle_ = rIC(this.runTasks_);\n      }\n    }\n  }\n\n  /**\n   * Runs as many tasks in the queue as it can before reaching the\n   * deadline. If no deadline is passed, it will run all tasks.\n   * If an `IdleDeadline` object is passed (as is with `requestIdleCallback`)\n   * then the tasks are run until there's no time remaining, at which point\n   * we yield to input or other script and wait until the next idle time.\n   * @param {IdleDeadline=} deadline\n   * @private\n   */\n  runTasks_(deadline?: any) {\n    this.cancelScheduledRun_();\n\n    if (!this.isProcessing_) {\n      this.isProcessing_ = true;\n\n      // Process tasks until there's no time left or we need to yield to input.\n      while (\n        this.hasPendingTasks() &&\n        !shouldYield(deadline, (this.taskQueue_[0] as any).minTaskTime)\n      ) {\n        const { task, state } = (this.taskQueue_ as any).shift();\n\n        this.state_ = state;\n        task(state);\n        this.state_ = null;\n      }\n\n      this.isProcessing_ = false;\n\n      if (this.hasPendingTasks()) {\n        // Schedule the rest of the tasks for the next idle time.\n        this.scheduleTasksToRun_();\n      }\n    }\n  }\n\n  /**\n   * Cancels any scheduled idle callback and removes the handler (if set).\n   * @private\n   */\n  cancelScheduledRun_() {\n    cIC(this.idleCallbackHandle_);\n    this.idleCallbackHandle_ = null;\n  }\n\n  /**\n   * A callback for the `visibilitychange` event that runs all pending\n   * callbacks immediately if the document's visibility state is hidden.\n   * @private\n   */\n  onVisibilityChange_() {\n    if (document.visibilityState === 'hidden') {\n      this.runTasksImmediately();\n    }\n  }\n}\n\n/**\n * Returns true if the IdleDealine object exists and the remaining time is\n * less or equal to than the minTaskTime. Otherwise returns false.\n * @param {IdleDeadline|undefined} deadline\n * @param {number} minTaskTime\n * @return {boolean}\n * @private\n */\nconst shouldYield = (deadline: any, minTaskTime: any) => {\n  if (deadline && deadline.timeRemaining() <= minTaskTime) {\n    return true;\n  }\n  return false;\n};\n","import { IPerformance } from './performance';\nimport { IMetricEntry, IPerfumeConfig } from './perfume';\n\nexport interface IPerformancePaintTiming {\n  name: string;\n  entryType: string;\n  startTime: number;\n  duration: number;\n}\n\nexport default class EmulatedPerformance implements IPerformance {\n  constructor(public config: IPerfumeConfig) {}\n\n  /**\n   * When performance API is not available\n   * returns Date.now that is limited to one-millisecond resolution.\n   */\n  now(): number {\n    return Date.now() / 1000;\n  }\n\n  mark(metricName: string, type: string): void {}\n\n  measure(metricName: string, metric: IMetricEntry): number {\n    return this.getDurationByMetric(metricName, metric);\n  }\n\n  /**\n   * First Paint is essentially the paint after which\n   * the biggest above-the-fold layout change has happened.\n   * Uses setTimeout to retrieve FCP\n   */\n  firstContentfulPaint(cb: (entries: any[]) => void): void {\n    setTimeout(() => {\n      cb(this.getFirstPaint());\n    });\n  }\n\n  /**\n   * Get the duration of the timing metric or -1 if there a measurement has\n   * not been made by now() fallback.\n   */\n  private getDurationByMetric(\n    metricName: string,\n    metric: IMetricEntry,\n  ): number {\n    const duration = metric.end - metric.start;\n    return duration || 0;\n  }\n\n  /**\n   * http://msdn.microsoft.com/ff974719\n   * developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/navigationStart\n   */\n  private getFirstPaint(): IPerformancePaintTiming[] {\n    const navTiming = window.performance.timing;\n    const performancePaintTiming: IPerformancePaintTiming = {\n      duration: 0,\n      entryType: 'paint',\n      name: 'first-contentful-paint',\n      startTime: 0,\n    };\n    if (navTiming && navTiming.navigationStart !== 0) {\n      performancePaintTiming.startTime = Date.now() - navTiming.navigationStart;\n    }\n    return [performancePaintTiming];\n  }\n}\n","/*\n Copyright 2018 Google Inc. All Rights Reserved.\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n*/\n\n(function(addEventListener, removeEventListener) {\n  var firstInputEvent;\n  var firstInputDelay;\n  var firstInputTimeStamp;\n\n  var callbacks = [];\n  var listenerOpts = {passive: true, capture: true};\n  var startTimeStamp = new Date;\n\n  var pointerup = 'pointerup';\n  var pointercancel = 'pointercancel';\n\n  /**\n   * Accepts a callback to be invoked once the first input delay and event\n   * are known.\n   * @param {!Function} callback\n   */\n  function onFirstInputDelay(callback) {\n    callbacks.push(callback);\n    reportFirstInputDelayIfRecordedAndValid();\n  }\n\n  /**\n   * Records the first input delay and event, so subsequent events can be\n   * ignored. All added event listeners are then removed.\n   * @param {number} delay\n   * @param {!Event} evt\n   */\n  function recordFirstInputDelay(delay, evt) {\n    if (!firstInputEvent) {\n      firstInputEvent = evt;\n      firstInputDelay = delay;\n      firstInputTimeStamp = new Date;\n\n      eachEventType(removeEventListener);\n      reportFirstInputDelayIfRecordedAndValid();\n    }\n  }\n\n  /**\n   * Reports the first input delay and event (if they're recorded and valid)\n   * by running the array of callback functions.\n   */\n  function reportFirstInputDelayIfRecordedAndValid() {\n    // In some cases the recorded delay is clearly wrong, e.g. it's negative\n    // or it's larger than the time between now and when the page was loaded.\n    // - https://github.com/GoogleChromeLabs/first-input-delay/issues/4\n    // - https://github.com/GoogleChromeLabs/first-input-delay/issues/6\n    // - https://github.com/GoogleChromeLabs/first-input-delay/issues/7\n    if (firstInputDelay >= 0 &&\n        firstInputDelay < firstInputTimeStamp - startTimeStamp) {\n      callbacks.forEach(function(callback) {\n        callback(firstInputDelay, firstInputEvent);\n      });\n      callbacks = [];\n    }\n  }\n\n  /**\n   * Handles pointer down events, which are a special case.\n   * Pointer events can trigger main or compositor thread behavior.\n   * We differenciate these cases based on whether or not we see a\n   * pointercancel event, which are fired when we scroll. If we're scrolling\n   * we don't need to report input delay since FID excludes scrolling and\n   * pinch/zooming.\n   * @param {number} delay\n   * @param {!Event} evt\n   */\n  function onPointerDown(delay, evt) {\n    /**\n     * Responds to pointerup events and records a delay. If a pointer up event\n     * is the next event after a pointerdown event, then it's not a sroll or\n     * a pinch/zoom.\n     */\n    function onPointerUp() {\n      recordFirstInputDelay(delay, evt);\n      removePointerEventListeners();\n    }\n\n    /**\n     * Responds to pointercancel events and removes pointer listeners.\n     * If a pointercancel is the next event to fire after a pointerdown event,\n     * it means this is a scroll or pinch/zoom interaction.\n     */\n    function onPointerCancel() {\n      removePointerEventListeners();\n    }\n\n    /**\n     * Removes added pointer event listeners.\n     */\n    function removePointerEventListeners() {\n      removeEventListener(pointerup, onPointerUp, listenerOpts);\n      removeEventListener(pointercancel, onPointerCancel, listenerOpts);\n    }\n\n    addEventListener(pointerup, onPointerUp, listenerOpts);\n    addEventListener(pointercancel, onPointerCancel, listenerOpts);\n  }\n\n  /**\n   * Handles all input events and records the time between when the event\n   * was received by the operating system and when it's JavaScript listeners\n   * were able to run.\n   * @param {!Event} evt\n   */\n  function onInput(evt) {\n    // Only count cancelable events, which should trigger behavior\n    // important to the user.\n    if (evt.cancelable) {\n      // In some browsers `event.timeStamp` returns a `DOMTimeStamp` value\n      // (epoch time) istead of the newer `DOMHighResTimeStamp`\n      // (document-origin time). To check for that we assume any timestamp\n      // greater than 1 trillion is a `DOMTimeStamp`, and compare it using\n      // the `Date` object rather than `performance.now()`.\n      // - https://github.com/GoogleChromeLabs/first-input-delay/issues/4\n      var isEpochTime = evt.timeStamp > 1e12;\n      var now = isEpochTime ? new Date : performance.now();\n\n      // Input delay is the delta between when the system received the event\n      // (e.g. evt.timeStamp) and when it could run the callback (e.g. `now`).\n      var delay = now - evt.timeStamp;\n\n      if (evt.type == 'pointerdown') {\n        onPointerDown(delay, evt);\n      } else {\n        recordFirstInputDelay(delay, evt);\n      }\n    }\n  }\n\n  /**\n   * Invokes the passed callback function for each event type with the\n   * `onInput` function and `listenerOpts`.\n   * @param {!Function} callback\n   */\n  function eachEventType(callback) {\n    var eventTypes = [\n      'click',\n      'mousedown',\n      'keydown',\n      'touchstart',\n      'pointerdown',\n    ];\n    eventTypes.forEach(function(eventType) {\n      callback(eventType, onInput, listenerOpts);\n    });\n  }\n\n  // TODO(tdresser): only register touchstart/pointerdown if other\n  // listeners are present.\n  eachEventType(addEventListener);\n\n  // Don't override the perfMetrics namespace if it already exists.\n  self['perfMetrics'] = self['perfMetrics'] || {};\n  self['perfMetrics']['onFirstInputDelay'] = onFirstInputDelay;\n})(addEventListener, removeEventListener);\n","// Import Polyfills\nimport 'first-input-delay';\n\n// Types\nimport { IMetricEntry, IPerformanceEntry, IPerfumeConfig } from './perfume';\n\nexport interface IPerformance {\n  config: IPerfumeConfig;\n\n  now(): number;\n\n  mark(metricName: string, type: string): any;\n\n  measure(metricName: string, metric: IMetricEntry): number;\n\n  firstContentfulPaint(cb: any): any;\n}\n\ndeclare const PerformanceObserver: any;\n\ndeclare interface IPerformanceObserverEntryList {\n  getEntries: any;\n  getEntriesByName: any;\n  getEntriesByType: any;\n}\n\nexport default class Performance implements IPerformance {\n  /**\n   * True if the browser supports the Navigation Timing API,\n   * User Timing API and the PerformanceObserver Interface.\n   * In Safari, the User Timing API (performance.mark()) is not available,\n   * so the DevTools timeline will not be annotated with marks.\n   * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/mark\n   * Support: developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\n   */\n  static supported(): boolean {\n    return window.performance && !!performance.now && !!performance.mark;\n  }\n\n  /**\n   * For now only Chrome fully support the PerformanceObserver interface\n   * and the entryType \"paint\".\n   * Firefox 58: https://bugzilla.mozilla.org/show_bug.cgi?id=1403027\n   */\n  static supportedPerformanceObserver(): boolean {\n    return (window as any).chrome && 'PerformanceObserver' in window;\n  }\n\n  private perfObserver: any;\n\n  constructor(public config: IPerfumeConfig) {}\n\n  /**\n   * When performance API available\n   * returns a DOMHighResTimeStamp, measured in milliseconds, accurate to five\n   * thousandths of a millisecond (5 microseconds).\n   */\n  now(): number {\n    return window.performance.now();\n  }\n\n  mark(metricName: string, type: string): void {\n    const mark = `mark_${metricName}_${type}`;\n    (window.performance.mark as any)(mark);\n  }\n\n  measure(metricName: string, metric: IMetricEntry): number {\n    const startMark = `mark_${metricName}_start`;\n    const endMark = `mark_${metricName}_end`;\n    (window.performance.measure as any)(metricName, startMark, endMark);\n    return this.getDurationByMetric(metricName, metric);\n  }\n\n  /**\n   * First Paint is essentially the paint after which\n   * the biggest above-the-fold layout change has happened.\n   * PerformanceObserver subscribes to performance events as they happen\n   * and respond to them asynchronously.\n   * entry.name will be either 'first-paint' or 'first-contentful-paint'\n   */\n  firstContentfulPaint(cb: (entries: any[]) => void): void {\n    this.perfObserver = new PerformanceObserver(\n      this.performanceObserverCb.bind(this, cb),\n    );\n    this.perfObserver.observe({ entryTypes: ['paint'] });\n  }\n\n  /**\n   * Get the duration of the timing metric or -1 if there a measurement has\n   * not been made by the User Timing API\n   */\n  private getDurationByMetric(\n    metricName: string,\n    metric: IMetricEntry,\n  ): number {\n    const entry = this.getMeasurementForGivenName(metricName);\n    if (entry && entry.entryType === 'measure') {\n      return entry.duration;\n    }\n    return -1;\n  }\n\n  /**\n   * Return the last PerformanceEntry objects for the given name.\n   */\n  private getMeasurementForGivenName(metricName: string): PerformanceEntry {\n    const entries = (window.performance as any).getEntriesByName(metricName);\n    return entries[entries.length - 1];\n  }\n\n  private performanceObserverCb(\n    cb: (entries: PerformanceEntry[]) => void,\n    entryList: IPerformanceObserverEntryList,\n  ): void {\n    const entries = entryList.getEntries();\n    cb(entries);\n    entries.forEach((performancePaintTiming: IPerformanceEntry) => {\n      if (\n        this.config.firstContentfulPaint &&\n        performancePaintTiming.name === 'first-contentful-paint'\n      ) {\n        this.perfObserver.disconnect();\n      }\n    });\n  }\n}\n","/*!\n * Perfume.js v2.1.2 (http://zizzamia.github.io/perfume)\n * Copyright 2018 The Perfume Authors (https://github.com/Zizzamia/perfume.js/graphs/contributors)\n * Licensed under MIT (https://github.com/Zizzamia/perfume.js/blob/master/LICENSE)\n * @license\n */\nimport { BrowserInfo, detect } from './detect-browser';\nimport { IdleQueue } from './idle-queue';\n\nimport EmulatedPerformance from './emulated-performance';\nimport Performance from './performance';\n\nexport interface IPerfumeConfig {\n  // Metrics\n  firstContentfulPaint: boolean;\n  firstInputDelay: boolean;\n  firstPaint: boolean;\n  // Analytics\n  analyticsTracker?: (\n    metricName: string,\n    duration: number,\n    browser?: BrowserInfo | any,\n  ) => void;\n  browserTracker?: boolean;\n  googleAnalytics: IGoogleAnalyticsConfig;\n  // Logging\n  logPrefix: string;\n  logging: boolean;\n  maxMeasureTime: number;\n  warning: boolean;\n  // Debugging\n  debugging: boolean;\n}\n\nexport interface IPerfumeOptions {\n  // Metrics\n  firstContentfulPaint?: boolean;\n  firstInputDelay?: boolean;\n  firstPaint?: boolean;\n  // Analytics\n  analyticsTracker?: (\n    metricName: string,\n    duration: number,\n    browser?: BrowserInfo | any,\n  ) => void;\n  browserTracker?: boolean;\n  googleAnalytics?: IGoogleAnalyticsConfig;\n  // Logging\n  logPrefix?: string;\n  logging?: boolean;\n  maxMeasureTime?: number;\n  warning?: boolean;\n  // Debugging\n  debugging?: boolean;\n}\n\nexport interface IGoogleAnalyticsConfig {\n  enable: boolean;\n  timingVar: string;\n}\n\nexport interface IMetricEntry {\n  start: number;\n  end: number;\n}\n\nexport declare interface IPerformanceEntry {\n  duration: number;\n  entryType: 'longtask' | 'measure' | 'navigation' | 'paint' | 'resource';\n  name: string;\n  startTime: number;\n}\n\ndeclare global {\n  // tslint:disable-next-line:interface-name\n  interface Window {\n    ga: any;\n  }\n}\n\nexport default class Perfume {\n  config: IPerfumeConfig = {\n    // Metrics\n    firstContentfulPaint: false,\n    firstPaint: false,\n    firstInputDelay: false,\n    // Analytics\n    googleAnalytics: {\n      enable: false,\n      timingVar: 'name',\n    },\n    browserTracker: false,\n    // Logging\n    logPrefix: 'Perfume.js:',\n    logging: true,\n    maxMeasureTime: 15000,\n    warning: false,\n    debugging: false,\n  };\n  firstPaintDuration: number = 0;\n  firstContentfulPaintDuration: number = 0;\n  firstInputDelayDuration: number = 0;\n  observeFirstContentfulPaint?: Promise<number>;\n  observeFirstInputDelay?: Promise<number>;\n  private browser: BrowserInfo | any;\n  private isHidden: boolean = false;\n  private logMetricWarn = 'Please provide a metric name';\n  private queue: any;\n  private metrics: Map<string, IMetricEntry> = new Map();\n  private observers = new Map();\n  private perf: Performance | EmulatedPerformance;\n  private perfEmulated?: EmulatedPerformance;\n\n  constructor(options: IPerfumeOptions = {}) {\n    // Extend default config with external options\n    this.config = Object.assign({}, this.config, options) as IPerfumeConfig;\n\n    // Init performance implementation based on supported browser APIs\n    this.perf = Performance.supported()\n      ? new Performance(this.config)\n      : new EmulatedPerformance(this.config);\n\n    // In case we want to track Browser version and OS\n    if (this.config.browserTracker) {\n      this.browser = detect();\n    }\n\n    // In case we can not use Performance Observer for initFirstPaint\n    if (!Performance.supportedPerformanceObserver()) {\n      this.perfEmulated = new EmulatedPerformance(this.config);\n    }\n\n    // Init observe FCP  and creates the Promise to observe metric\n    if (this.config.firstPaint || this.config.firstContentfulPaint) {\n      this.observeFirstContentfulPaint = new Promise(resolve => {\n        this.logDebug('observeFirstContentfulPaint');\n        this.observers.set('fcp', resolve);\n        this.initFirstPaint();\n      });\n    }\n\n    // FID needs to be initialized as soon as Perfume is available, which returns\n    // a Promise that can be observed\n    if (this.config.firstInputDelay) {\n      this.observeFirstInputDelay = new Promise(resolve => {\n        this.observers.set('fid', resolve);\n        this.initFirstInputDelay();\n      });\n    }\n\n    // Init visibilitychange listener\n    this.onVisibilityChange();\n\n    // Ensures the queue is run immediately whenever the page\n    // is in a state where it might soon be unloaded.\n    // https://philipwalton.com/articles/idle-until-urgent/\n    this.queue = new IdleQueue({ ensureTasksRun: true });\n  }\n\n  /**\n   * Start performance measurement\n   */\n  start(metricName: string): void {\n    if (!this.checkMetricName(metricName)) {\n      return;\n    }\n    if (this.metrics.has(metricName)) {\n      this.logWarn(this.config.logPrefix, 'Recording already started.');\n      return;\n    }\n    this.metrics.set(metricName, {\n      end: 0,\n      start: this.perf.now(),\n    });\n\n    // Creates a timestamp in the browser's performance entry buffer\n    this.perf.mark(metricName, 'start');\n\n    // Reset hidden value\n    this.isHidden = false;\n  }\n\n  /**\n   * End performance measurement\n   */\n  end(metricName: string): void | number {\n    if (!this.checkMetricName(metricName)) {\n      return;\n    }\n    const metric = this.metrics.get(metricName);\n    if (!metric) {\n      this.logWarn(this.config.logPrefix, 'Recording already stopped.');\n      return;\n    }\n    // End Performance Mark\n    metric.end = this.perf.now();\n    this.perf.mark(metricName, 'end');\n    // Get duration and change it to a two decimal value\n    const duration = this.perf.measure(metricName, metric);\n    const duration2Decimal = parseFloat(duration.toFixed(2));\n    this.metrics.delete(metricName);\n    this.queue.pushTask(() => {\n      // Log to console, delete metric and send to analytics tracker\n      this.log(metricName, duration2Decimal);\n      this.sendTiming(metricName, duration2Decimal);\n    });\n    return duration2Decimal;\n  }\n\n  /**\n   * End performance measurement after first paint from the beging of it\n   */\n  endPaint(metricName: string): Promise<void | number> {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const duration = this.end(metricName);\n        resolve(duration);\n      });\n    });\n  }\n\n  /**\n   * Coloring Text in Browser Console\n   */\n  log(metricName: string, duration: number): void {\n    // Don't log when page is hidden or has disabled logging\n    if (this.isHidden || !this.config.logging) {\n      return;\n    }\n    if (!metricName) {\n      this.logWarn(this.config.logPrefix, this.logMetricWarn);\n      return;\n    }\n    const durationMs = duration.toFixed(2);\n    const style = 'color: #ff6d00;font-size:11px;';\n    const text = `%c ${this.config.logPrefix} ${metricName} ${durationMs} ms`;\n    window.console.log(text, style);\n  }\n\n  /**\n   * Coloring Debugging Text in Browser Console\n   */\n  logDebug(methodName: string, debugValue: any = ''): void {\n    if (!this.config.debugging) {\n      return;\n    }\n    window.console.log(`Perfume.js debugging ${methodName}:`, debugValue);\n  }\n\n  /**\n   * Sends the User timing measure to Google Analytics.\n   * ga('send', 'timing', [timingCategory], [timingVar], [timingValue])\n   * timingCategory: metricName\n   * timingVar: googleAnalytics.timingVar\n   * timingValue: The value of duration rounded to the nearest integer\n   */\n  sendTiming(metricName: string, duration: number): void {\n    // Doesn't send timing when page is hidden\n    if (this.isHidden) {\n      return;\n    }\n    // Get Browser from userAgent\n    const browser = this.config.browserTracker ? this.browser : undefined;\n    const metricNameWithBrowser = this.addBrowserToMetricName(metricName);\n    // Send metric to custom Analytics service,\n    // the default choice is Google Analytics\n    if (this.config.analyticsTracker) {\n      this.config.analyticsTracker(metricName, duration, browser);\n    }\n    // Stop sending timing to GA if not enabled\n    if (!this.config.googleAnalytics.enable) {\n      return;\n    }\n    if (!window.ga) {\n      this.logWarn(\n        this.config.logPrefix,\n        'Google Analytics has not been loaded',\n      );\n      return;\n    }\n    const durationInteger = Math.round(duration);\n    window.ga(\n      'send',\n      'timing',\n      metricNameWithBrowser,\n      this.config.googleAnalytics.timingVar,\n      durationInteger,\n    );\n  }\n\n  private addBrowserToMetricName(metricName: string): string {\n    if (!this.config.browserTracker) {\n      return metricName;\n    }\n    let metricNameWithBrowser = metricName;\n    // Check if Browser Name exist\n    if (this.browser.name) {\n      const browserName = this.browser.name.replace(/\\s/g, '');\n      metricNameWithBrowser += `.${browserName}`;\n      // Check if Browser OS exist\n      if (this.browser.os) {\n        const browserOS = this.browser.os.replace(/\\s/g, '');\n        metricNameWithBrowser += `.${browserOS}`;\n      }\n    }\n    return metricNameWithBrowser;\n  }\n\n  private checkMetricName(metricName: string): boolean {\n    if (metricName) {\n      return true;\n    }\n    this.logWarn(this.config.logPrefix, this.logMetricWarn);\n    return false;\n  }\n\n  private didVisibilityChange = () => {\n    if (document.hidden) {\n      this.isHidden = document.hidden;\n    }\n  };\n\n  private firstContentfulPaintCb(entries: IPerformanceEntry[]): void {\n    this.logDebug('firstContentfulPaintCb', entries);\n    // Logging Performance Paint Timing\n    entries.forEach((performancePaintTiming: IPerformanceEntry) => {\n      this.queue.pushTask(() => {\n        if (\n          this.config.firstPaint &&\n          performancePaintTiming.name === 'first-paint'\n        ) {\n          this.logMetric(\n            performancePaintTiming.startTime,\n            'First Paint',\n            'firstPaint',\n          );\n        }\n        if (\n          this.config.firstContentfulPaint &&\n          performancePaintTiming.name === 'first-contentful-paint'\n        ) {\n          this.logMetric(\n            performancePaintTiming.startTime,\n            'First Contentful Paint',\n            'firstContentfulPaint',\n          );\n        }\n      });\n    });\n  }\n\n  private initFirstPaint(): void {\n    this.logDebug('initFirstPaint');\n    // Checks if use Performance or the EmulatedPerformance instance\n    if (Performance.supportedPerformanceObserver()) {\n      this.logDebug('initFirstPaint.supportedPerformanceObserver');\n      try {\n        this.perf.firstContentfulPaint(this.firstContentfulPaintCb.bind(this));\n      } catch (e) {\n        this.logWarn(this.config.logPrefix, 'initFirstPaint failed');\n      }\n    } else if (this.perfEmulated) {\n      this.logDebug('initFirstPaint.perfEmulated');\n      this.perfEmulated.firstContentfulPaint(\n        this.firstContentfulPaintCb.bind(this),\n      );\n    }\n  }\n\n  private initFirstInputDelay(): void {\n    if (Performance.supported() && this.config.firstInputDelay) {\n      // perfMetrics is exposed by the FID Polyfill\n      perfMetrics.onFirstInputDelay((duration, event) => {\n        this.queue.pushTask(() => {\n          this.logMetric(duration, 'First Input Delay', 'firstInputDelay');\n        });\n      });\n    }\n  }\n\n  /**\n   * From visibilitychange listener it saves only when\n   * the page gets hidden, because it's important to not\n   * use the wrong \"hidden\" value when send timing or logging.\n   */\n  private onVisibilityChange() {\n    if (typeof document.hidden !== 'undefined') {\n      // Opera 12.10 and Firefox 18 and later support\n      document.addEventListener('visibilitychange', this.didVisibilityChange);\n    }\n  }\n\n  /**\n   * Dispatches the metric duration into internal logs\n   * and the external time tracking service.\n   */\n  private logMetric(\n    duration: number,\n    logText: string,\n    metricName: string,\n  ): void {\n    const duration2Decimal = parseFloat(duration.toFixed(2));\n    // Stop Analytics and Logging for false negative metrics\n    if (duration2Decimal > this.config.maxMeasureTime) {\n      return;\n    }\n\n    // Save metrics in Duration property\n    if (metricName === 'firstPaint') {\n      this.firstPaintDuration = duration2Decimal;\n    }\n    if (metricName === 'firstContentfulPaint') {\n      this.firstContentfulPaintDuration = duration2Decimal;\n      this.observers.get('fcp')(duration2Decimal);\n    }\n    if (metricName === 'firstInputDelay') {\n      this.firstInputDelayDuration = duration2Decimal;\n      this.observers.get('fid')(duration2Decimal);\n    }\n\n    // Logs the metric in the internal console.log\n    this.log(logText, duration2Decimal);\n\n    // Sends the metric to an external tracking service\n    this.sendTiming(metricName, duration2Decimal);\n  }\n\n  /**\n   * Ensures console.warn exist and logging is enable for\n   * warning messages\n   */\n  private logWarn(prefix: string, message: string): void {\n    if (!this.config.warning || !this.config.logging) {\n      return;\n    }\n    window.console.warn(prefix, message);\n  }\n}\n"],"names":["name","version","os","this","process","platform","REQUIRED_VERSION_PARTS","userAgentRules","operatingSystemRules","navigator","ua","matchedRule","reduce","matched","_a","browser","regex","uaMatch","exec","match","BotInfo","split","slice","length","Array","fill","BrowserInfo","join","find","test","detectOS","parseUserAgent","userAgent","NodeInfo","i","microtaskQueue","observer","node","now","Date","supportsRequestIdleCallback_","window","requestIdleCallback","initTime","initTime_","Object","IdleDealine","Math","max","rIC","callback","deadline","setTimeout","cIC","cancelIdleCallback","handle","clearTimeout","queueMicrotask","Promise","toString","indexOf","microtask","resolve","then","MutationObserver","forEach","document","createTextNode","observe","characterData","push","data","String","DEFAULT_MIN_TASK_TIME","isSafari_","safari","pushNotification","_b","_c","ensureTasksRun","_d","defaultMinTaskTime","idleCallbackHandle_","taskQueue_","isProcessing_","state_","defaultMinTaskTime_","ensureTasksRun_","runTasksImmediately","bind","runTasks_","onVisibilityChange_","addEventListener","IdleQueue","cb","addTask_","prototype","unshift","cancelScheduledRun_","removeEventListener","arrayMethod","task","minTaskTime","state","time","visibilityState","call","scheduleTasksToRun_","hasPendingTasks","shouldYield","timeRemaining","config","EmulatedPerformance","metricName","type","metric","getDurationByMetric","_this","getFirstPaint","end","start","navTiming","performance","timing","performancePaintTiming","duration","entryType","startTime","navigationStart","firstInputEvent","firstInputDelay","firstInputTimeStamp","callbacks","listenerOpts","passive","capture","startTimeStamp","pointerup","pointercancel","recordFirstInputDelay","delay","evt","eachEventType","reportFirstInputDelayIfRecordedAndValid","onInput","cancelable","timeStamp","onPointerUp","removePointerEventListeners","onPointerCancel","onPointerDown","eventType","self","Performance","mark","chrome","startMark","endMark","measure","perfObserver","PerformanceObserver","performanceObserverCb","entryTypes","entry","getMeasurementForGivenName","entries","getEntriesByName","entryList","getEntries","firstContentfulPaint","disconnect","options","firstPaint","googleAnalytics","enable","timingVar","browserTracker","logPrefix","logging","maxMeasureTime","warning","debugging","Map","hidden","isHidden","assign","perf","supported","detect","supportedPerformanceObserver","perfEmulated","observeFirstContentfulPaint","logDebug","observers","set","initFirstPaint","observeFirstInputDelay","initFirstInputDelay","onVisibilityChange","queue","Perfume","checkMetricName","metrics","has","logWarn","get","duration2Decimal","parseFloat","toFixed","delete","pushTask","log","sendTiming","durationMs","text","console","logMetricWarn","methodName","debugValue","undefined","metricNameWithBrowser","addBrowserToMetricName","analyticsTracker","ga","durationInteger","round","replace","logMetric","firstContentfulPaintCb","e","perfMetrics","onFirstInputDelay","event","didVisibilityChange","logText","firstPaintDuration","firstContentfulPaintDuration","firstInputDelayDuration","prefix","message","warn"],"mappings":"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"}