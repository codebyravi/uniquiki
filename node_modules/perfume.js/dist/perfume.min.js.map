{"version":3,"file":"perfume.min.js","sources":["../src/detect-browser.ts","../src/idle-queue.ts","../src/emulated-performance.ts","../src/performance.ts","../src/perfume.ts"],"sourcesContent":["interface DetectedInfo<N extends string, O, V = null> {\n  readonly name: N;\n  readonly version: V;\n  readonly os: O;\n}\n\nexport class BrowserInfo implements DetectedInfo<Browser, OperatingSystem | null, string> {\n  constructor(\n    public readonly name: Browser,\n    public readonly version: string,\n    public readonly os: OperatingSystem | null) {\n  }\n}\n\nexport class NodeInfo implements DetectedInfo<'node', NodeJS.Platform, string> {\n  public readonly name: 'node' = 'node';\n  public readonly os: NodeJS.Platform = process.platform;\n\n  constructor( public readonly version: string) {\n  }\n}\n\nexport class BotInfo implements DetectedInfo<'bot', null, null> {\n  public readonly bot: true = true; // NOTE: deprecated test name instead\n  public readonly name: 'bot' = 'bot';\n  public readonly version: null = null;\n  public readonly os: null = null;\n}\n\ntype Browser =\n  | 'aol'\n  | 'edge'\n  | 'yandexbrowser'\n  | 'vivaldi'\n  | 'kakaotalk'\n  | 'samsung'\n  | 'chrome'\n  | 'phantomjs'\n  | 'crios'\n  | 'firefox'\n  | 'fxios'\n  | 'opera'\n  | 'ie'\n  | 'bb10'\n  | 'android'\n  | 'ios'\n  | 'safari'\n  | 'facebook'\n  | 'instagram'\n  | 'ios-webview'\n  | 'searchbot';\ntype OperatingSystem =\n  | 'iOS'\n  | 'Android OS'\n  | 'BlackBerry OS'\n  | 'Windows Mobile'\n  | 'Amazon OS'\n  | 'Windows 3.11'\n  | 'Windows 95'\n  | 'Windows 98'\n  | 'Windows 2000'\n  | 'Windows XP'\n  | 'Windows Server 2003'\n  | 'Windows Vista'\n  | 'Windows 7'\n  | 'Windows 8'\n  | 'Windows 8.1'\n  | 'Windows 10'\n  | 'Windows ME'\n  | 'Open BSD'\n  | 'Sun OS'\n  | 'Linux'\n  | 'Mac OS'\n  | 'QNX'\n  | 'BeOS'\n  | 'OS/2'\n  | 'Search Bot';\ntype UserAgentRule = [Browser, RegExp];\ntype UserAgentMatch = [Browser, RegExpExecArray] | false;\ntype OperatingSystemRule = [OperatingSystem, RegExp];\n\n// tslint:disable-next-line:max-line-length\nconst SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nconst SEARCHBOT_OS_REGEX = /(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\\/Teoma)|(ia_archiver)/;\nconst REQUIRED_VERSION_PARTS = 3;\n\nconst userAgentRules: UserAgentRule[] = [\n  ['aol', /AOLShield\\/([0-9\\._]+)/],\n  ['edge', /Edge\\/([0-9\\._]+)/],\n  ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n  ['vivaldi', /Vivaldi\\/([0-9\\.]+)/],\n  ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n  ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n  ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n  ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n  ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n  ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n  ['fxios', /FxiOS\\/([0-9\\.]+)/],\n  ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n  ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)$/],\n  ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n  ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n  ['ie', /MSIE\\s(7\\.0)/],\n  ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n  ['android', /Android\\s([0-9\\.]+)/],\n  ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n  ['safari', /Version\\/([0-9\\._]+).*Safari/],\n  ['facebook', /FBAV\\/([0-9\\.]+)/],\n  ['instagram', /Instagram\\s([0-9\\.]+)/],\n  ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n  ['searchbot', SEARCHBOX_UA_REGEX],\n];\nconst operatingSystemRules: OperatingSystemRule[] = [\n  ['iOS', /iP(hone|od|ad)/],\n  ['Android OS', /Android/],\n  ['BlackBerry OS', /BlackBerry|BB10/],\n  ['Windows Mobile', /IEMobile/],\n  ['Amazon OS', /Kindle/],\n  ['Windows 3.11', /Win16/],\n  ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n  ['Windows 98', /(Windows 98)|(Win98)/],\n  ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n  ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n  ['Windows Server 2003', /(Windows NT 5.2)/],\n  ['Windows Vista', /(Windows NT 6.0)/],\n  ['Windows 7', /(Windows NT 6.1)/],\n  ['Windows 8', /(Windows NT 6.2)/],\n  ['Windows 8.1', /(Windows NT 6.3)/],\n  ['Windows 10', /(Windows NT 10.0)/],\n  ['Windows ME', /Windows ME/],\n  ['Open BSD', /OpenBSD/],\n  ['Sun OS', /SunOS/],\n  ['Linux', /(Linux)|(X11)/],\n  ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n  ['QNX', /QNX/],\n  ['BeOS', /BeOS/],\n  ['OS/2', /OS\\/2/],\n  ['Search Bot', SEARCHBOT_OS_REGEX],\n];\n\nexport function detect(): BrowserInfo | BotInfo | NodeInfo | null {\n  if (typeof navigator !== 'undefined') {\n    return parseUserAgent(navigator.userAgent);\n  }\n\n  return getNodeVersion();\n}\n\nexport function parseUserAgent(ua: string): BrowserInfo | BotInfo | null {\n  // opted for using reduce here rather than Array#first with a regex.test call\n  // this is primarily because using the reduce we only perform the regex\n  // execution once rather than once for the test and for the exec again below\n  // probably something that needs to be benchmarked though\n  const matchedRule: UserAgentMatch =\n    ua !== '' &&\n    userAgentRules.reduce<UserAgentMatch>((matched: UserAgentMatch, [browser, regex]) => {\n      if (matched) {\n        return matched;\n      }\n\n      const uaMatch = regex.exec(ua);\n      return !!uaMatch && [browser, uaMatch];\n    }, false);\n\n  if (!matchedRule) {\n    return null;\n  }\n\n  const [name, match] = matchedRule;\n  if (name === 'searchbot') {\n    return new BotInfo();\n  }\n\n  let version = match[1] && match[1].split(/[._]/).slice(0, 3);\n  if (version) {\n    if (version.length < REQUIRED_VERSION_PARTS) {\n      version = [\n        ...version,\n        ...new Array(REQUIRED_VERSION_PARTS - version.length).fill('0'),\n      ];\n    }\n  } else {\n    version = [];\n  }\n\n  return new BrowserInfo(name, version.join('.'), detectOS(ua));\n}\n\nexport function detectOS(ua: string): OperatingSystem | null {\n  const match = operatingSystemRules.find(([_, regex]) => regex.test(ua));\n  return match ? match[0] : null;\n}\n\nexport function getNodeVersion(): NodeInfo | null {\n  const isNode = typeof process !== 'undefined' && process.version;\n  return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\n","/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @private\n * @return {number} The current date timestamp\n */\nexport const now = () => {\n  return +new Date();\n};\n\ndeclare global {\n  // tslint:disable-next-line:interface-name\n  interface Window {\n    cancelIdleCallback: any;\n    requestIdleCallback: any;\n    safari: any;\n  }\n}\n\nconst supportsRequestIdleCallback_ =\n  typeof window.requestIdleCallback === 'function';\n\n/**\n * A minimal shim of the native IdleDeadline class.\n */\nclass IdleDealine {\n  initTime_: any;\n  /** @param {number} initTime */\n  constructor(initTime: any) {\n    this.initTime_ = initTime;\n  }\n  /** @return {boolean} */\n  get didTimeout() {\n    return false;\n  }\n  /** @return {number} */\n  timeRemaining() {\n    return Math.max(0, 50 - (now() - this.initTime_));\n  }\n}\n\n/**\n * A minimal shim for the requestIdleCallback function. This accepts a\n * callback function and runs it at the next idle period, passing in an\n * object with a `timeRemaining()` method.\n * @private\n * @param {!Function} callback\n * @return {number}\n */\nconst requestIdleCallbackShim = (callback: any) => {\n  const deadline = new IdleDealine(now());\n  return setTimeout(() => callback(deadline), 0);\n};\n\n/**\n * A minimal shim for the  cancelIdleCallback function. This accepts a\n * handle identifying the idle callback to cancel.\n * @private\n * @param {number|null} handle\n */\nconst cancelIdleCallbackShim = (handle: any) => {\n  clearTimeout(handle);\n};\n\n/**\n * The native `requestIdleCallback()` function or `cancelIdleCallbackShim()`\n * .if the browser doesn't support it.\n * @param {!Function} callback\n * @return {number}\n */\nexport const rIC = supportsRequestIdleCallback_\n  ? window.requestIdleCallback\n  : requestIdleCallbackShim;\n\n/**\n * The native `cancelIdleCallback()` function or `cancelIdleCallbackShim()`\n * if the browser doesn't support it.\n * @param {number} handle\n */\nexport const cIC = supportsRequestIdleCallback_\n  ? window.cancelIdleCallback\n  : cancelIdleCallbackShim;\n\n/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @return {!Function}\n */\nconst createQueueMicrotaskViaPromises = () => {\n  return (microtask: any) => {\n    Promise.resolve().then(microtask);\n  };\n};\n\n/**\n * @return {!Function}\n */\nconst createQueueMicrotaskViaMutationObserver = () => {\n  let i = 0;\n  let microtaskQueue: any = [];\n  const observer = new MutationObserver(() => {\n    microtaskQueue.forEach((microtask: any) => microtask());\n    microtaskQueue = [];\n  });\n  const node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return (microtask: any) => {\n    microtaskQueue.push(microtask);\n\n    // Trigger a mutation observer callback, which is a microtask.\n    // tslint:disable-next-line:no-increment-decrement\n    node.data = String(++i % 2);\n  };\n};\n\n/**\n * Queues a function to be run in the next microtask. If the browser supports\n * Promises, those are used. Otherwise it falls back to MutationObserver.\n * Note: since Promise polyfills are popular but not all support microtasks,\n * we check for native implementation rather than a polyfill.\n * @private\n * @param {!Function} microtask\n */\nexport const queueMicrotask =\n  typeof Promise === 'function' &&\n  Promise.toString().indexOf('[native code]') > -1\n    ? createQueueMicrotaskViaPromises()\n    : createQueueMicrotaskViaMutationObserver();\n\nconst DEFAULT_MIN_TASK_TIME = 0;\n\nconst isSafari_ = !!(\n  typeof window.safari === 'object' && window.safari.pushNotification\n);\n\n/**\n * A class wraps a queue of requestIdleCallback functions for two reasons:\n *   1. So other callers can know whether or not the queue is empty.\n *   2. So we can provide some guarantees that the queued functions will\n *      run in unload-type situations.\n */\nexport class IdleQueue {\n  idleCallbackHandle_: any;\n  taskQueue_ = [];\n  isProcessing_ = false;\n  state_ = null;\n  defaultMinTaskTime_: any;\n  ensureTasksRun_: any;\n\n  /**\n   * Creates the IdleQueue instance and adds lifecycle event listeners to\n   * run the queue if the page is hidden (with fallback behavior for Safari).\n   * @param {{\n   *   ensureTasksRun: boolean,\n   *   defaultMinTaskTime: number,\n   * }=} param1\n   */\n  constructor({\n    ensureTasksRun = false,\n    defaultMinTaskTime = DEFAULT_MIN_TASK_TIME,\n  } = {}) {\n    this.idleCallbackHandle_ = null;\n    this.taskQueue_ = [];\n    this.isProcessing_ = false;\n    this.state_ = null;\n    this.defaultMinTaskTime_ = defaultMinTaskTime;\n    this.ensureTasksRun_ = ensureTasksRun;\n\n    // Bind methods\n    this.runTasksImmediately = this.runTasksImmediately.bind(this);\n    this.runTasks_ = this.runTasks_.bind(this);\n    this.onVisibilityChange_ = this.onVisibilityChange_.bind(this);\n\n    if (this.ensureTasksRun_) {\n      addEventListener('visibilitychange', this.onVisibilityChange_, true);\n\n      // Safari does not reliably fire the `pagehide` or `visibilitychange`\n      // events when closing a tab, so we have to use `beforeunload` with a\n      // timeout to check whether the default action was prevented.\n      // - https://bugs.webkit.org/show_bug.cgi?id=151610\n      // - https://bugs.webkit.org/show_bug.cgi?id=151234\n      // NOTE: we only add this to Safari because adding it to Firefox would\n      // prevent the page from being eligible for bfcache.\n      if (isSafari_) {\n        addEventListener('beforeunload', this.runTasksImmediately, true);\n      }\n    }\n  }\n\n  /**\n   * @param {...*} args\n   */\n  pushTask(cb: any) {\n    this.addTask_(Array.prototype.push, cb);\n  }\n\n  /**\n   * @param {...*} args\n   */\n  unshiftTask(cb: any) {\n    this.addTask_(Array.prototype.unshift, cb);\n  }\n\n  /**\n   * Runs all scheduled tasks synchronously.\n   */\n  runTasksImmediately() {\n    // By not passing a deadline, all tasks will be run sync.\n    this.runTasks_();\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasPendingTasks() {\n    return this.taskQueue_.length > 0;\n  }\n\n  /**\n   * Clears all pending tasks for the queue and stops any scheduled tasks\n   * from running.\n   */\n  clearPendingTasks() {\n    this.taskQueue_ = [];\n    this.cancelScheduledRun_();\n  }\n\n  /**\n   * Returns the state object for the currently running task. If no task is\n   * running, null is returned.\n   * @return {?Object}\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * Destroys the instance by unregistering all added event listeners and\n   * removing any overridden methods.\n   */\n  destroy() {\n    this.taskQueue_ = [];\n    this.cancelScheduledRun_();\n\n    if (this.ensureTasksRun_) {\n      removeEventListener('visibilitychange', this.onVisibilityChange_, true);\n\n      // Safari does not reliably fire the `pagehide` or `visibilitychange`\n      // events when closing a tab, so we have to use `beforeunload` with a\n      // timeout to check whether the default action was prevented.\n      // - https://bugs.webkit.org/show_bug.cgi?id=151610\n      // - https://bugs.webkit.org/show_bug.cgi?id=151234\n      // NOTE: we only add this to Safari because adding it to Firefox would\n      // prevent the page from being eligible for bfcache.\n      if (isSafari_) {\n        removeEventListener('beforeunload', this.runTasksImmediately, true);\n      }\n    }\n  }\n\n  /**\n   * @param {!Function} arrayMethod Either the Array.prototype{push|shift}.\n   * @param {!Function} task\n   * @param {{minTaskTime: number}=} param1\n   * @private\n   */\n  addTask_(\n    arrayMethod: any,\n    task: any,\n    { minTaskTime = this.defaultMinTaskTime_ } = {},\n  ) {\n    const state = {\n      time: now(),\n      visibilityState: document.visibilityState,\n    };\n\n    arrayMethod.call(this.taskQueue_, { state, task, minTaskTime });\n\n    this.scheduleTasksToRun_();\n  }\n\n  /**\n   * Schedules the task queue to be processed. If the document is in the\n   * hidden state, they queue is scheduled as a microtask so it can be run\n   * in cases where a macrotask couldn't (like if the page is unloading). If\n   * the document is in the visible state, `requestIdleCallback` is used.\n   * @private\n   */\n  scheduleTasksToRun_() {\n    if (this.ensureTasksRun_ && document.visibilityState === 'hidden') {\n      queueMicrotask(this.runTasks_);\n    } else {\n      if (!this.idleCallbackHandle_) {\n        this.idleCallbackHandle_ = rIC(this.runTasks_);\n      }\n    }\n  }\n\n  /**\n   * Runs as many tasks in the queue as it can before reaching the\n   * deadline. If no deadline is passed, it will run all tasks.\n   * If an `IdleDeadline` object is passed (as is with `requestIdleCallback`)\n   * then the tasks are run until there's no time remaining, at which point\n   * we yield to input or other script and wait until the next idle time.\n   * @param {IdleDeadline=} deadline\n   * @private\n   */\n  runTasks_(deadline?: any) {\n    this.cancelScheduledRun_();\n\n    if (!this.isProcessing_) {\n      this.isProcessing_ = true;\n\n      // Process tasks until there's no time left or we need to yield to input.\n      while (\n        this.hasPendingTasks() &&\n        !shouldYield(deadline, (this.taskQueue_[0] as any).minTaskTime)\n      ) {\n        const { task, state } = (this.taskQueue_ as any).shift();\n\n        this.state_ = state;\n        task(state);\n        this.state_ = null;\n      }\n\n      this.isProcessing_ = false;\n\n      if (this.hasPendingTasks()) {\n        // Schedule the rest of the tasks for the next idle time.\n        this.scheduleTasksToRun_();\n      }\n    }\n  }\n\n  /**\n   * Cancels any scheduled idle callback and removes the handler (if set).\n   * @private\n   */\n  cancelScheduledRun_() {\n    cIC(this.idleCallbackHandle_);\n    this.idleCallbackHandle_ = null;\n  }\n\n  /**\n   * A callback for the `visibilitychange` event that runs all pending\n   * callbacks immediately if the document's visibility state is hidden.\n   * @private\n   */\n  onVisibilityChange_() {\n    if (document.visibilityState === 'hidden') {\n      this.runTasksImmediately();\n    }\n  }\n}\n\n/**\n * Returns true if the IdleDealine object exists and the remaining time is\n * less or equal to than the minTaskTime. Otherwise returns false.\n * @param {IdleDeadline|undefined} deadline\n * @param {number} minTaskTime\n * @return {boolean}\n * @private\n */\nconst shouldYield = (deadline: any, minTaskTime: any) => {\n  if (deadline && deadline.timeRemaining() <= minTaskTime) {\n    return true;\n  }\n  return false;\n};\n","import { IPerformance } from './performance';\nimport { IMetricEntry, IPerfumeConfig } from './perfume';\n\nexport interface IPerformancePaintTiming {\n  name: string;\n  entryType: string;\n  startTime: number;\n  duration: number;\n}\n\nexport default class EmulatedPerformance implements IPerformance {\n  constructor(public config: IPerfumeConfig) {}\n\n  /**\n   * When performance API is not available\n   * returns Date.now that is limited to one-millisecond resolution.\n   */\n  now(): number {\n    return Date.now() / 1000;\n  }\n\n  mark(metricName: string, type: string): void {}\n\n  measure(metricName: string, metric: IMetricEntry): number {\n    return this.getDurationByMetric(metricName, metric);\n  }\n\n  /**\n   * First Paint is essentially the paint after which\n   * the biggest above-the-fold layout change has happened.\n   * Uses setTimeout to retrieve FCP\n   */\n  firstContentfulPaint(cb: (entries: any[]) => void): void {\n    setTimeout(() => {\n      cb(this.getFirstPaint());\n    });\n  }\n\n  /**\n   * Get the duration of the timing metric or -1 if there a measurement has\n   * not been made by now() fallback.\n   */\n  private getDurationByMetric(\n    metricName: string,\n    metric: IMetricEntry,\n  ): number {\n    const duration = metric.end - metric.start;\n    return duration || 0;\n  }\n\n  /**\n   * http://msdn.microsoft.com/ff974719\n   * developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/navigationStart\n   */\n  private getFirstPaint(): IPerformancePaintTiming[] {\n    const navTiming = window.performance.timing;\n    const performancePaintTiming: IPerformancePaintTiming = {\n      duration: 0,\n      entryType: 'paint',\n      name: 'first-contentful-paint',\n      startTime: 0,\n    };\n    if (navTiming && navTiming.navigationStart !== 0) {\n      performancePaintTiming.startTime = Date.now() - navTiming.navigationStart;\n    }\n    return [performancePaintTiming];\n  }\n}\n","// Import Polyfills\nimport 'first-input-delay';\n\n// Types\nimport { IMetricEntry, IPerformanceEntry, IPerfumeConfig } from './perfume';\n\nexport interface IPerformance {\n  config: IPerfumeConfig;\n\n  now(): number;\n\n  mark(metricName: string, type: string): any;\n\n  measure(metricName: string, metric: IMetricEntry): number;\n\n  firstContentfulPaint(cb: any): any;\n}\n\ndeclare const PerformanceObserver: any;\n\ndeclare interface IPerformanceObserverEntryList {\n  getEntries: any;\n  getEntriesByName: any;\n  getEntriesByType: any;\n}\n\nexport default class Performance implements IPerformance {\n  /**\n   * True if the browser supports the Navigation Timing API,\n   * User Timing API and the PerformanceObserver Interface.\n   * In Safari, the User Timing API (performance.mark()) is not available,\n   * so the DevTools timeline will not be annotated with marks.\n   * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/mark\n   * Support: developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\n   */\n  static supported(): boolean {\n    return window.performance && !!performance.now && !!performance.mark;\n  }\n\n  /**\n   * For now only Chrome fully support the PerformanceObserver interface\n   * and the entryType \"paint\".\n   * Firefox 58: https://bugzilla.mozilla.org/show_bug.cgi?id=1403027\n   */\n  static supportedPerformanceObserver(): boolean {\n    return (window as any).chrome && 'PerformanceObserver' in window;\n  }\n\n  private perfObserver: any;\n\n  constructor(public config: IPerfumeConfig) {}\n\n  /**\n   * When performance API available\n   * returns a DOMHighResTimeStamp, measured in milliseconds, accurate to five\n   * thousandths of a millisecond (5 microseconds).\n   */\n  now(): number {\n    return window.performance.now();\n  }\n\n  mark(metricName: string, type: string): void {\n    const mark = `mark_${metricName}_${type}`;\n    (window.performance.mark as any)(mark);\n  }\n\n  measure(metricName: string, metric: IMetricEntry): number {\n    const startMark = `mark_${metricName}_start`;\n    const endMark = `mark_${metricName}_end`;\n    (window.performance.measure as any)(metricName, startMark, endMark);\n    return this.getDurationByMetric(metricName, metric);\n  }\n\n  /**\n   * First Paint is essentially the paint after which\n   * the biggest above-the-fold layout change has happened.\n   * PerformanceObserver subscribes to performance events as they happen\n   * and respond to them asynchronously.\n   * entry.name will be either 'first-paint' or 'first-contentful-paint'\n   */\n  firstContentfulPaint(cb: (entries: any[]) => void): void {\n    this.perfObserver = new PerformanceObserver(\n      this.performanceObserverCb.bind(this, cb),\n    );\n    this.perfObserver.observe({ entryTypes: ['paint'] });\n  }\n\n  /**\n   * Get the duration of the timing metric or -1 if there a measurement has\n   * not been made by the User Timing API\n   */\n  private getDurationByMetric(\n    metricName: string,\n    metric: IMetricEntry,\n  ): number {\n    const entry = this.getMeasurementForGivenName(metricName);\n    if (entry && entry.entryType === 'measure') {\n      return entry.duration;\n    }\n    return -1;\n  }\n\n  /**\n   * Return the last PerformanceEntry objects for the given name.\n   */\n  private getMeasurementForGivenName(metricName: string): PerformanceEntry {\n    const entries = (window.performance as any).getEntriesByName(metricName);\n    return entries[entries.length - 1];\n  }\n\n  private performanceObserverCb(\n    cb: (entries: PerformanceEntry[]) => void,\n    entryList: IPerformanceObserverEntryList,\n  ): void {\n    const entries = entryList.getEntries();\n    cb(entries);\n    entries.forEach((performancePaintTiming: IPerformanceEntry) => {\n      if (\n        this.config.firstContentfulPaint &&\n        performancePaintTiming.name === 'first-contentful-paint'\n      ) {\n        this.perfObserver.disconnect();\n      }\n    });\n  }\n}\n","/*!\n * Perfume.js v2.1.2 (http://zizzamia.github.io/perfume)\n * Copyright 2018 The Perfume Authors (https://github.com/Zizzamia/perfume.js/graphs/contributors)\n * Licensed under MIT (https://github.com/Zizzamia/perfume.js/blob/master/LICENSE)\n * @license\n */\nimport { BrowserInfo, detect } from './detect-browser';\nimport { IdleQueue } from './idle-queue';\n\nimport EmulatedPerformance from './emulated-performance';\nimport Performance from './performance';\n\nexport interface IPerfumeConfig {\n  // Metrics\n  firstContentfulPaint: boolean;\n  firstInputDelay: boolean;\n  firstPaint: boolean;\n  // Analytics\n  analyticsTracker?: (\n    metricName: string,\n    duration: number,\n    browser?: BrowserInfo | any,\n  ) => void;\n  browserTracker?: boolean;\n  googleAnalytics: IGoogleAnalyticsConfig;\n  // Logging\n  logPrefix: string;\n  logging: boolean;\n  maxMeasureTime: number;\n  warning: boolean;\n  // Debugging\n  debugging: boolean;\n}\n\nexport interface IPerfumeOptions {\n  // Metrics\n  firstContentfulPaint?: boolean;\n  firstInputDelay?: boolean;\n  firstPaint?: boolean;\n  // Analytics\n  analyticsTracker?: (\n    metricName: string,\n    duration: number,\n    browser?: BrowserInfo | any,\n  ) => void;\n  browserTracker?: boolean;\n  googleAnalytics?: IGoogleAnalyticsConfig;\n  // Logging\n  logPrefix?: string;\n  logging?: boolean;\n  maxMeasureTime?: number;\n  warning?: boolean;\n  // Debugging\n  debugging?: boolean;\n}\n\nexport interface IGoogleAnalyticsConfig {\n  enable: boolean;\n  timingVar: string;\n}\n\nexport interface IMetricEntry {\n  start: number;\n  end: number;\n}\n\nexport declare interface IPerformanceEntry {\n  duration: number;\n  entryType: 'longtask' | 'measure' | 'navigation' | 'paint' | 'resource';\n  name: string;\n  startTime: number;\n}\n\ndeclare global {\n  // tslint:disable-next-line:interface-name\n  interface Window {\n    ga: any;\n  }\n}\n\nexport default class Perfume {\n  config: IPerfumeConfig = {\n    // Metrics\n    firstContentfulPaint: false,\n    firstPaint: false,\n    firstInputDelay: false,\n    // Analytics\n    googleAnalytics: {\n      enable: false,\n      timingVar: 'name',\n    },\n    browserTracker: false,\n    // Logging\n    logPrefix: 'Perfume.js:',\n    logging: true,\n    maxMeasureTime: 15000,\n    warning: false,\n    debugging: false,\n  };\n  firstPaintDuration: number = 0;\n  firstContentfulPaintDuration: number = 0;\n  firstInputDelayDuration: number = 0;\n  observeFirstContentfulPaint?: Promise<number>;\n  observeFirstInputDelay?: Promise<number>;\n  private browser: BrowserInfo | any;\n  private isHidden: boolean = false;\n  private logMetricWarn = 'Please provide a metric name';\n  private queue: any;\n  private metrics: Map<string, IMetricEntry> = new Map();\n  private observers = new Map();\n  private perf: Performance | EmulatedPerformance;\n  private perfEmulated?: EmulatedPerformance;\n\n  constructor(options: IPerfumeOptions = {}) {\n    // Extend default config with external options\n    this.config = Object.assign({}, this.config, options) as IPerfumeConfig;\n\n    // Init performance implementation based on supported browser APIs\n    this.perf = Performance.supported()\n      ? new Performance(this.config)\n      : new EmulatedPerformance(this.config);\n\n    // In case we want to track Browser version and OS\n    if (this.config.browserTracker) {\n      this.browser = detect();\n    }\n\n    // In case we can not use Performance Observer for initFirstPaint\n    if (!Performance.supportedPerformanceObserver()) {\n      this.perfEmulated = new EmulatedPerformance(this.config);\n    }\n\n    // Init observe FCP  and creates the Promise to observe metric\n    if (this.config.firstPaint || this.config.firstContentfulPaint) {\n      this.observeFirstContentfulPaint = new Promise(resolve => {\n        this.logDebug('observeFirstContentfulPaint');\n        this.observers.set('fcp', resolve);\n        this.initFirstPaint();\n      });\n    }\n\n    // FID needs to be initialized as soon as Perfume is available, which returns\n    // a Promise that can be observed\n    if (this.config.firstInputDelay) {\n      this.observeFirstInputDelay = new Promise(resolve => {\n        this.observers.set('fid', resolve);\n        this.initFirstInputDelay();\n      });\n    }\n\n    // Init visibilitychange listener\n    this.onVisibilityChange();\n\n    // Ensures the queue is run immediately whenever the page\n    // is in a state where it might soon be unloaded.\n    // https://philipwalton.com/articles/idle-until-urgent/\n    this.queue = new IdleQueue({ ensureTasksRun: true });\n  }\n\n  /**\n   * Start performance measurement\n   */\n  start(metricName: string): void {\n    if (!this.checkMetricName(metricName)) {\n      return;\n    }\n    if (this.metrics.has(metricName)) {\n      this.logWarn(this.config.logPrefix, 'Recording already started.');\n      return;\n    }\n    this.metrics.set(metricName, {\n      end: 0,\n      start: this.perf.now(),\n    });\n\n    // Creates a timestamp in the browser's performance entry buffer\n    this.perf.mark(metricName, 'start');\n\n    // Reset hidden value\n    this.isHidden = false;\n  }\n\n  /**\n   * End performance measurement\n   */\n  end(metricName: string): void | number {\n    if (!this.checkMetricName(metricName)) {\n      return;\n    }\n    const metric = this.metrics.get(metricName);\n    if (!metric) {\n      this.logWarn(this.config.logPrefix, 'Recording already stopped.');\n      return;\n    }\n    // End Performance Mark\n    metric.end = this.perf.now();\n    this.perf.mark(metricName, 'end');\n    // Get duration and change it to a two decimal value\n    const duration = this.perf.measure(metricName, metric);\n    const duration2Decimal = parseFloat(duration.toFixed(2));\n    this.metrics.delete(metricName);\n    this.queue.pushTask(() => {\n      // Log to console, delete metric and send to analytics tracker\n      this.log(metricName, duration2Decimal);\n      this.sendTiming(metricName, duration2Decimal);\n    });\n    return duration2Decimal;\n  }\n\n  /**\n   * End performance measurement after first paint from the beging of it\n   */\n  endPaint(metricName: string): Promise<void | number> {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const duration = this.end(metricName);\n        resolve(duration);\n      });\n    });\n  }\n\n  /**\n   * Coloring Text in Browser Console\n   */\n  log(metricName: string, duration: number): void {\n    // Don't log when page is hidden or has disabled logging\n    if (this.isHidden || !this.config.logging) {\n      return;\n    }\n    if (!metricName) {\n      this.logWarn(this.config.logPrefix, this.logMetricWarn);\n      return;\n    }\n    const durationMs = duration.toFixed(2);\n    const style = 'color: #ff6d00;font-size:11px;';\n    const text = `%c ${this.config.logPrefix} ${metricName} ${durationMs} ms`;\n    window.console.log(text, style);\n  }\n\n  /**\n   * Coloring Debugging Text in Browser Console\n   */\n  logDebug(methodName: string, debugValue: any = ''): void {\n    if (!this.config.debugging) {\n      return;\n    }\n    window.console.log(`Perfume.js debugging ${methodName}:`, debugValue);\n  }\n\n  /**\n   * Sends the User timing measure to Google Analytics.\n   * ga('send', 'timing', [timingCategory], [timingVar], [timingValue])\n   * timingCategory: metricName\n   * timingVar: googleAnalytics.timingVar\n   * timingValue: The value of duration rounded to the nearest integer\n   */\n  sendTiming(metricName: string, duration: number): void {\n    // Doesn't send timing when page is hidden\n    if (this.isHidden) {\n      return;\n    }\n    // Get Browser from userAgent\n    const browser = this.config.browserTracker ? this.browser : undefined;\n    const metricNameWithBrowser = this.addBrowserToMetricName(metricName);\n    // Send metric to custom Analytics service,\n    // the default choice is Google Analytics\n    if (this.config.analyticsTracker) {\n      this.config.analyticsTracker(metricName, duration, browser);\n    }\n    // Stop sending timing to GA if not enabled\n    if (!this.config.googleAnalytics.enable) {\n      return;\n    }\n    if (!window.ga) {\n      this.logWarn(\n        this.config.logPrefix,\n        'Google Analytics has not been loaded',\n      );\n      return;\n    }\n    const durationInteger = Math.round(duration);\n    window.ga(\n      'send',\n      'timing',\n      metricNameWithBrowser,\n      this.config.googleAnalytics.timingVar,\n      durationInteger,\n    );\n  }\n\n  private addBrowserToMetricName(metricName: string): string {\n    if (!this.config.browserTracker) {\n      return metricName;\n    }\n    let metricNameWithBrowser = metricName;\n    // Check if Browser Name exist\n    if (this.browser.name) {\n      const browserName = this.browser.name.replace(/\\s/g, '');\n      metricNameWithBrowser += `.${browserName}`;\n      // Check if Browser OS exist\n      if (this.browser.os) {\n        const browserOS = this.browser.os.replace(/\\s/g, '');\n        metricNameWithBrowser += `.${browserOS}`;\n      }\n    }\n    return metricNameWithBrowser;\n  }\n\n  private checkMetricName(metricName: string): boolean {\n    if (metricName) {\n      return true;\n    }\n    this.logWarn(this.config.logPrefix, this.logMetricWarn);\n    return false;\n  }\n\n  private didVisibilityChange = () => {\n    if (document.hidden) {\n      this.isHidden = document.hidden;\n    }\n  };\n\n  private firstContentfulPaintCb(entries: IPerformanceEntry[]): void {\n    this.logDebug('firstContentfulPaintCb', entries);\n    // Logging Performance Paint Timing\n    entries.forEach((performancePaintTiming: IPerformanceEntry) => {\n      this.queue.pushTask(() => {\n        if (\n          this.config.firstPaint &&\n          performancePaintTiming.name === 'first-paint'\n        ) {\n          this.logMetric(\n            performancePaintTiming.startTime,\n            'First Paint',\n            'firstPaint',\n          );\n        }\n        if (\n          this.config.firstContentfulPaint &&\n          performancePaintTiming.name === 'first-contentful-paint'\n        ) {\n          this.logMetric(\n            performancePaintTiming.startTime,\n            'First Contentful Paint',\n            'firstContentfulPaint',\n          );\n        }\n      });\n    });\n  }\n\n  private initFirstPaint(): void {\n    this.logDebug('initFirstPaint');\n    // Checks if use Performance or the EmulatedPerformance instance\n    if (Performance.supportedPerformanceObserver()) {\n      this.logDebug('initFirstPaint.supportedPerformanceObserver');\n      try {\n        this.perf.firstContentfulPaint(this.firstContentfulPaintCb.bind(this));\n      } catch (e) {\n        this.logWarn(this.config.logPrefix, 'initFirstPaint failed');\n      }\n    } else if (this.perfEmulated) {\n      this.logDebug('initFirstPaint.perfEmulated');\n      this.perfEmulated.firstContentfulPaint(\n        this.firstContentfulPaintCb.bind(this),\n      );\n    }\n  }\n\n  private initFirstInputDelay(): void {\n    if (Performance.supported() && this.config.firstInputDelay) {\n      // perfMetrics is exposed by the FID Polyfill\n      perfMetrics.onFirstInputDelay((duration, event) => {\n        this.queue.pushTask(() => {\n          this.logMetric(duration, 'First Input Delay', 'firstInputDelay');\n        });\n      });\n    }\n  }\n\n  /**\n   * From visibilitychange listener it saves only when\n   * the page gets hidden, because it's important to not\n   * use the wrong \"hidden\" value when send timing or logging.\n   */\n  private onVisibilityChange() {\n    if (typeof document.hidden !== 'undefined') {\n      // Opera 12.10 and Firefox 18 and later support\n      document.addEventListener('visibilitychange', this.didVisibilityChange);\n    }\n  }\n\n  /**\n   * Dispatches the metric duration into internal logs\n   * and the external time tracking service.\n   */\n  private logMetric(\n    duration: number,\n    logText: string,\n    metricName: string,\n  ): void {\n    const duration2Decimal = parseFloat(duration.toFixed(2));\n    // Stop Analytics and Logging for false negative metrics\n    if (duration2Decimal > this.config.maxMeasureTime) {\n      return;\n    }\n\n    // Save metrics in Duration property\n    if (metricName === 'firstPaint') {\n      this.firstPaintDuration = duration2Decimal;\n    }\n    if (metricName === 'firstContentfulPaint') {\n      this.firstContentfulPaintDuration = duration2Decimal;\n      this.observers.get('fcp')(duration2Decimal);\n    }\n    if (metricName === 'firstInputDelay') {\n      this.firstInputDelayDuration = duration2Decimal;\n      this.observers.get('fid')(duration2Decimal);\n    }\n\n    // Logs the metric in the internal console.log\n    this.log(logText, duration2Decimal);\n\n    // Sends the metric to an external tracking service\n    this.sendTiming(metricName, duration2Decimal);\n  }\n\n  /**\n   * Ensures console.warn exist and logging is enable for\n   * warning messages\n   */\n  private logWarn(prefix: string, message: string): void {\n    if (!this.config.warning || !this.config.logging) {\n      return;\n    }\n    window.console.warn(prefix, message);\n  }\n}\n"],"names":["name","version","os","this","process","platform","SEARCHBOX_UA_REGEX","SEARCHBOT_OS_REGEX","REQUIRED_VERSION_PARTS","userAgentRules","operatingSystemRules","navigator","parseUserAgent","userAgent","getNodeVersion","ua","matchedRule","reduce","matched","_a","browser","regex","uaMatch","exec","match","BotInfo","split","slice","length","Array","fill","BrowserInfo","join","detectOS","find","test","NodeInfo","now","Date","supportsRequestIdleCallback_","window","requestIdleCallback","initTime","initTime_","Object","IdleDealine","Math","max","requestIdleCallbackShim","callback","deadline","setTimeout","cancelIdleCallbackShim","handle","clearTimeout","rIC","cIC","cancelIdleCallback","createQueueMicrotaskViaPromises","microtask","Promise","resolve","then","createQueueMicrotaskViaMutationObserver","i","microtaskQueue","observer","MutationObserver","forEach","node","document","createTextNode","observe","characterData","push","data","String","queueMicrotask","toString","indexOf","DEFAULT_MIN_TASK_TIME","isSafari_","safari","pushNotification","_b","_c","ensureTasksRun","_d","defaultMinTaskTime","idleCallbackHandle_","taskQueue_","isProcessing_","state_","defaultMinTaskTime_","ensureTasksRun_","runTasksImmediately","bind","runTasks_","onVisibilityChange_","addEventListener","IdleQueue","cb","addTask_","prototype","unshift","cancelScheduledRun_","removeEventListener","arrayMethod","task","minTaskTime","state","time","visibilityState","call","scheduleTasksToRun_","hasPendingTasks","shouldYield","timeRemaining","config","EmulatedPerformance","metricName","type","metric","getDurationByMetric","_this","getFirstPaint","end","start","navTiming","performance","timing","performancePaintTiming","duration","entryType","startTime","navigationStart","Performance","mark","chrome","startMark","endMark","measure","perfObserver","PerformanceObserver","performanceObserverCb","entryTypes","entry","getMeasurementForGivenName","entries","getEntriesByName","entryList","getEntries","firstContentfulPaint","disconnect","options","firstPaint","firstInputDelay","googleAnalytics","enable","timingVar","browserTracker","logPrefix","logging","maxMeasureTime","warning","debugging","Map","hidden","isHidden","assign","perf","supported","detect","supportedPerformanceObserver","perfEmulated","observeFirstContentfulPaint","logDebug","observers","set","initFirstPaint","observeFirstInputDelay","initFirstInputDelay","onVisibilityChange","queue","Perfume","checkMetricName","metrics","has","logWarn","get","duration2Decimal","parseFloat","toFixed","delete","pushTask","log","sendTiming","durationMs","text","console","logMetricWarn","methodName","debugValue","undefined","metricNameWithBrowser","addBrowserToMetricName","analyticsTracker","ga","durationInteger","round","replace","logMetric","firstContentfulPaintCb","e","perfMetrics","onFirstInputDelay","event","didVisibilityChange","logText","firstPaintDuration","firstContentfulPaintDuration","firstInputDelayDuration","prefix","message","warn"],"mappings":"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"}