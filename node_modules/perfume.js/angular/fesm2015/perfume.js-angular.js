import { Inject, Injectable, InjectionToken, NgModule } from '@angular/core';
import Perfume from 'perfume.js';

let perfume;
const PERFUME_CONFIG = new InjectionToken('Perfume.js config');
class PerfumeRootModule {
    constructor(config) {
        this.config = config;
        perfume = new Perfume(config);
    }
}
PerfumeRootModule.decorators = [
    { type: NgModule, args: [{},] }
];
/** @nocollapse */
PerfumeRootModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PERFUME_CONFIG,] }] }
];
class NgPerfume {
    constructor() {
        this.firstPaintDuration = 0;
        this.firstContentfulPaintDuration = 0;
        this.firstInputDelayDuration = 0;
        this.timeToInteractiveDuration = 0;
        this.config = perfume.config;
        this.firstPaintDuration = perfume.firstPaintDuration;
        this.firstContentfulPaintDuration = perfume.firstContentfulPaintDuration;
        this.firstInputDelayDuration = perfume.firstInputDelayDuration;
        this.observeFirstContentfulPaint = perfume.observeFirstContentfulPaint;
        this.observeFirstInputDelay = perfume.observeFirstInputDelay;
        this.observeTimeToInteractive = perfume.observeTimeToInteractive;
        this.timeToInteractiveDuration = perfume.timeToInteractiveDuration;
    }
    start(metricName) {
        perfume.start(metricName);
    }
    end(metricName) {
        return perfume.end(metricName);
    }
    endPaint(metricName) {
        return perfume.endPaint(metricName);
    }
    log(metricName, duration) {
        perfume.log(metricName, duration);
    }
    sendTiming(metricName, duration) {
        perfume.sendTiming(metricName, duration);
    }
}
NgPerfume.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgPerfume.ctorParameters = () => [];
class PerfumeModule {
    static forRoot(config) {
        return {
            ngModule: PerfumeRootModule,
            providers: [
                {
                    provide: PERFUME_CONFIG,
                    useValue: config,
                },
                NgPerfume,
            ],
        };
    }
}
PerfumeModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                exports: [],
            },] }
];
/**
 * Component View Init (CVI) decorator
 * Marks the time between the constructor is initialized,
 * and ngAfterViewInit execution ends.
 */
// tslint:disable-next-line:function-name
function PerfumeAfterViewInit(targetName) {
    return function DecoratorFactory(target) {
        // The new constructor behavior, supports AOT and DI
        const newConstructor = function newCtor(...args) {
            perfume.start(targetName || target.name);
            const c = function childConstuctor() {
                return target.apply(this, arguments);
            };
            c.prototype = Object.create(target.prototype);
            return new c(...args);
        };
        // The new ngAfterViewInit behavior
        const ngAfterViewInit = target.prototype.ngAfterViewInit;
        target.prototype.ngAfterViewInit = function (...args) {
            // tslint:disable-next-line:no-unused-expression
            ngAfterViewInit && ngAfterViewInit.apply(this, args);
            perfume.end(targetName || target.name);
        };
        // Copy prototype so instanceof operator still works
        newConstructor.prototype = Object.create(target.prototype);
        // Return new constructor (will override original)
        return newConstructor;
    };
}

/*
 * Public API Surface of perfume
 */

/**
 * Generated bundle index. Do not edit.
 */

export { perfume, PERFUME_CONFIG, PerfumeRootModule, NgPerfume, PerfumeModule, PerfumeAfterViewInit };

//# sourceMappingURL=perfume.js-angular.js.map