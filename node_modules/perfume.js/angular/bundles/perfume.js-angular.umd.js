(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('perfume.js')) :
    typeof define === 'function' && define.amd ? define('perfume.js/angular', ['exports', '@angular/core', 'perfume.js'], factory) :
    (factory((global.perfume = global.perfume || {}, global.perfume.js = global.perfume.js || {}, global.perfume.js.angular = {}),global.ng.core,global.Perfume));
}(this, (function (exports,core,Perfume) { 'use strict';

    Perfume = Perfume && Perfume.hasOwnProperty('default') ? Perfume['default'] : Perfume;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    var PERFUME_CONFIG = new core.InjectionToken('Perfume.js config');
    var PerfumeRootModule = /** @class */ (function () {
        function PerfumeRootModule(config) {
            this.config = config;
            exports.perfume = new Perfume(config);
        }
        PerfumeRootModule.decorators = [
            { type: core.NgModule, args: [{},] }
        ];
        /** @nocollapse */
        PerfumeRootModule.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [PERFUME_CONFIG,] }] }
            ];
        };
        return PerfumeRootModule;
    }());
    var NgPerfume = /** @class */ (function () {
        function NgPerfume() {
            this.firstPaintDuration = 0;
            this.firstContentfulPaintDuration = 0;
            this.firstInputDelayDuration = 0;
            this.timeToInteractiveDuration = 0;
            this.config = exports.perfume.config;
            this.firstPaintDuration = exports.perfume.firstPaintDuration;
            this.firstContentfulPaintDuration = exports.perfume.firstContentfulPaintDuration;
            this.firstInputDelayDuration = exports.perfume.firstInputDelayDuration;
            this.observeFirstContentfulPaint = exports.perfume.observeFirstContentfulPaint;
            this.observeFirstInputDelay = exports.perfume.observeFirstInputDelay;
            this.observeTimeToInteractive = exports.perfume.observeTimeToInteractive;
            this.timeToInteractiveDuration = exports.perfume.timeToInteractiveDuration;
        }
        NgPerfume.prototype.start = function (metricName) {
            exports.perfume.start(metricName);
        };
        NgPerfume.prototype.end = function (metricName) {
            return exports.perfume.end(metricName);
        };
        NgPerfume.prototype.endPaint = function (metricName) {
            return exports.perfume.endPaint(metricName);
        };
        NgPerfume.prototype.log = function (metricName, duration) {
            exports.perfume.log(metricName, duration);
        };
        NgPerfume.prototype.sendTiming = function (metricName, duration) {
            exports.perfume.sendTiming(metricName, duration);
        };
        NgPerfume.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        NgPerfume.ctorParameters = function () { return []; };
        return NgPerfume;
    }());
    var PerfumeModule = /** @class */ (function () {
        function PerfumeModule() {
        }
        PerfumeModule.forRoot = function (config) {
            return {
                ngModule: PerfumeRootModule,
                providers: [
                    {
                        provide: PERFUME_CONFIG,
                        useValue: config,
                    },
                    NgPerfume,
                ],
            };
        };
        PerfumeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                    },] }
        ];
        return PerfumeModule;
    }());
    /**
     * Component View Init (CVI) decorator
     * Marks the time between the constructor is initialized,
     * and ngAfterViewInit execution ends.
     */
    // tslint:disable-next-line:function-name
    function PerfumeAfterViewInit(targetName) {
        return function DecoratorFactory(target) {
            // The new constructor behavior, supports AOT and DI
            var newConstructor = function newCtor() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                exports.perfume.start(targetName || target.name);
                var c = function childConstuctor() {
                    return target.apply(this, arguments);
                };
                c.prototype = Object.create(target.prototype);
                return new (c.bind.apply(c, __spread([void 0], args)))();
            };
            // The new ngAfterViewInit behavior
            var ngAfterViewInit = target.prototype.ngAfterViewInit;
            target.prototype.ngAfterViewInit = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                // tslint:disable-next-line:no-unused-expression
                ngAfterViewInit && ngAfterViewInit.apply(this, args);
                exports.perfume.end(targetName || target.name);
            };
            // Copy prototype so instanceof operator still works
            newConstructor.prototype = Object.create(target.prototype);
            // Return new constructor (will override original)
            return newConstructor;
        };
    }

    /*
     * Public API Surface of perfume
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PERFUME_CONFIG = PERFUME_CONFIG;
    exports.PerfumeRootModule = PerfumeRootModule;
    exports.NgPerfume = NgPerfume;
    exports.PerfumeModule = PerfumeModule;
    exports.PerfumeAfterViewInit = PerfumeAfterViewInit;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=perfume.js-angular.umd.js.map