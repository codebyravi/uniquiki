import * as tslib_1 from "tslib";
import { Inject, Injectable, InjectionToken, NgModule, } from '@angular/core';
import Perfume from 'perfume.js';
export var perfume;
export var PERFUME_CONFIG = new InjectionToken('Perfume.js config');
var PerfumeRootModule = /** @class */ (function () {
    function PerfumeRootModule(config) {
        this.config = config;
        perfume = new Perfume(config);
    }
    PerfumeRootModule.decorators = [
        { type: NgModule, args: [{},] }
    ];
    /** @nocollapse */
    PerfumeRootModule.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PERFUME_CONFIG,] }] }
    ]; };
    return PerfumeRootModule;
}());
export { PerfumeRootModule };
var NgPerfume = /** @class */ (function () {
    function NgPerfume() {
        this.firstPaintDuration = 0;
        this.firstContentfulPaintDuration = 0;
        this.firstInputDelayDuration = 0;
        this.timeToInteractiveDuration = 0;
        this.config = perfume.config;
        this.firstPaintDuration = perfume.firstPaintDuration;
        this.firstContentfulPaintDuration = perfume.firstContentfulPaintDuration;
        this.firstInputDelayDuration = perfume.firstInputDelayDuration;
        this.observeFirstContentfulPaint = perfume.observeFirstContentfulPaint;
        this.observeFirstInputDelay = perfume.observeFirstInputDelay;
        this.observeTimeToInteractive = perfume.observeTimeToInteractive;
        this.timeToInteractiveDuration = perfume.timeToInteractiveDuration;
    }
    NgPerfume.prototype.start = function (metricName) {
        perfume.start(metricName);
    };
    NgPerfume.prototype.end = function (metricName) {
        return perfume.end(metricName);
    };
    NgPerfume.prototype.endPaint = function (metricName) {
        return perfume.endPaint(metricName);
    };
    NgPerfume.prototype.log = function (metricName, duration) {
        perfume.log(metricName, duration);
    };
    NgPerfume.prototype.sendTiming = function (metricName, duration) {
        perfume.sendTiming(metricName, duration);
    };
    NgPerfume.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgPerfume.ctorParameters = function () { return []; };
    return NgPerfume;
}());
export { NgPerfume };
var PerfumeModule = /** @class */ (function () {
    function PerfumeModule() {
    }
    PerfumeModule.forRoot = function (config) {
        return {
            ngModule: PerfumeRootModule,
            providers: [
                {
                    provide: PERFUME_CONFIG,
                    useValue: config,
                },
                NgPerfume,
            ],
        };
    };
    PerfumeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                },] }
    ];
    return PerfumeModule;
}());
export { PerfumeModule };
/**
 * Component View Init (CVI) decorator
 * Marks the time between the constructor is initialized,
 * and ngAfterViewInit execution ends.
 */
// tslint:disable-next-line:function-name
export function PerfumeAfterViewInit(targetName) {
    return function DecoratorFactory(target) {
        // The new constructor behavior, supports AOT and DI
        var newConstructor = function newCtor() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            perfume.start(targetName || target.name);
            var c = function childConstuctor() {
                return target.apply(this, arguments);
            };
            c.prototype = Object.create(target.prototype);
            return new (c.bind.apply(c, tslib_1.__spread([void 0], args)))();
        };
        // The new ngAfterViewInit behavior
        var ngAfterViewInit = target.prototype.ngAfterViewInit;
        target.prototype.ngAfterViewInit = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // tslint:disable-next-line:no-unused-expression
            ngAfterViewInit && ngAfterViewInit.apply(this, args);
            perfume.end(targetName || target.name);
        };
        // Copy prototype so instanceof operator still works
        newConstructor.prototype = Object.create(target.prototype);
        // Return new constructor (will override original)
        return newConstructor;
    };
}
//# sourceMappingURL=data:application/json;base64,