import { BehaviorSubject } from 'rxjs';
import { __assign, __spread, __generator } from 'tslib';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * portable shortcut for the RootRoute cases
 * @type {?}
 */
var rootNote = {
    root: { path: '' }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * generator that keeps and generates unique identifiers
 * @return {?}
 */
function idfy() {
    var index, options;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                index = 0;
                _a.label = 1;
            case 1:
                return [4 /*yield*/, index++];
            case 2:
                options = _a.sent();
                if (!options) {
                    return [3 /*break*/, 1];
                }
                index = options.reset ? -1 : index;
                return [3 /*break*/, 1];
            case 3: return [2 /*return*/];
        }
    });
}
/**
 * provides ordered ids
 * @type {?}
 */
var indexer = idfy();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Prevents to record empty state paths
 * @param {?} state
 * @param {?} path
 * @return {?}
 */
function setNotEmptyPath(state, path) {
    return path !== '' ? __spread(state, [path]) : state;
}
/**
 * Checks multi path in a single route
 * @param {?} path
 * @return {?}
 */
function checkMultiPath(path) {
    /** @type {?} */
    var slashId = path ? path.indexOf('/') : -1;
    return slashId !== -1;
}
/**
 * Prevents to record multi path in the state
 * @param {?} path
 * @return {?}
 */
function splitPath(path) {
    return path.split('/').filter((/**
     * @param {?} state
     * @return {?}
     */
    function (state) { return !!state; }));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Assigns a value based on the parent's  state and a current path
 * @type {?}
 */
var setState = (/**
 * @param {?} parentSlice
 * @param {?} path
 * @return {?}
 */
function (parentSlice, path) {
    if (path.includes('*')) {
        return [path];
    }
    return parentSlice !== null
        ? setNotEmptyPath(parentSlice.state, path)
        : setNotEmptyPath(['/'], path);
});
/**
 * Absorbs and gives params out together
 * @type {?}
 */
var reduceParams = (/**
 * @param {?} params
 * @param {?} restParams
 * @return {?}
 */
function (params, restParams) {
    return restParams.reduce((/**
     * @param {?} accParams
     * @param {?} param
     * @return {?}
     */
    function (accParams, param) { return (__assign({}, accParams, param)); }), params);
});
/**
 * Replaces property with a value
 * Helps stateFn generating dynamic values
 * @type {?}
 */
var handleState = (/**
 * @param {?} params
 * @param {?=} state
 * @return {?}
 */
function (params, state) {
    if (state === void 0) { state = []; }
    return Object.keys(params).reduce((/**
     * @param {?} accState
     * @param {?} param
     * @return {?}
     */
    function (accState, param) {
        return accState.map((/**
         * @param {?} slice
         * @return {?}
         */
        function (slice) {
            return slice === ":" + param ? params[param] : slice;
        }));
    }), state);
});
/**
 * Supports dynamic paths
 * @param {?} state
 * @param {?=} params
 * @param {...?} otherParams
 * @return {?}
 */
function stateFn(state, params) {
    var otherParams = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        otherParams[_i - 2] = arguments[_i];
    }
    if (!params) {
        return state;
    }
    /** @type {?} */
    var parameters = otherParams.length === 0 ? params : reduceParams(params, otherParams);
    return handleState(parameters, state);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Serializes routes
 * to enhance capabilities
 * @template R, C
 * @param {?} parentSlice
 * @param {?} routes
 * @return {?}
 */
function enhance(parentSlice, routes) {
    return Object.keys(routes).reduce((/**
     * @param {?} acc
     * @param {?} routeName
     * @return {?}
     */
    function (acc, routeName) {
        var _a;
        var _b = routes[routeName], children = _b.children, path = _b.path, lazy = _b.lazy;
        /** @type {?} */
        var state = setState(parentSlice, path);
        /** @type {?} */
        var route = {
            id: indexer.next().value,
            parentId: parentSlice !== null ? parentSlice.id : null,
            state: state,
            stateFn: stateFn.bind(null, state),
            path: checkMultiPath(path) ? splitPath(path) : path,
            lazy: lazy || null,
            routeName: routeName
        };
        /* tslint:disable:prefer-object-spread */
        return Object.assign(acc, (_a = {},
            _a[routeName] = __assign({}, route, { children: children !== undefined ? enhance(route, children) : null }),
            _a));
    }), (/** @type {?} */ ({})));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * refreshes children parent target
 * because of replacing them with a parent node
 * @template R, C
 * @param {?} parent
 * @return {?}
 */
function refreshChildren(parent) {
    /** @type {?} */
    var children = parent.children;
    /** @type {?} */
    var inheritorId = parent.id + 1;
    /** @type {?} */
    var inheritorName = Object.keys(children).find((/**
     * @param {?} routeName
     * @return {?}
     */
    function (routeName) { return children[routeName].id === inheritorId; }));
    return Object.keys(children).reduce((/**
     * @param {?} acc
     * @param {?} name
     * @return {?}
     */
    function (acc, name) {
        var _a;
        /** @type {?} */
        var parentId = children[name].id === inheritorId
            ? parent.parentId
            : children[inheritorName].id;
        /** @type {?} */
        var routeName = name === inheritorName && name === 'root' ? parent.routeName : name;
        /** @type {?} */
        var route = __assign({}, children[name], { parentId: parentId, routeName: routeName });
        /* tslint:disable:prefer-object-spread */
        /* https://github.com/Microsoft/TypeScript/issues/10727 */
        return (/** @type {?} */ (__assign({}, ((/** @type {?} */ (acc))), (_a = {}, _a[routeName] = route, _a))));
    }), (/** @type {?} */ ({})));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * stores routes states at the same level
 * @type {?}
 */
var hub = new BehaviorSubject(null);
/**
 * Detects and handles children routes
 * @type {?}
 */
var entitify = (/**
 * @template R, C
 * @param {?} routes
 * @return {?}
 */
function (routes) {
    return Object.keys(routes).reduce((/**
     * @param {?} acc
     * @param {?} routeName
     * @return {?}
     */
    function (acc, routeName) {
        var _a;
        return routes[routeName].children
            ? Object.assign({}, acc, refreshChildren(routes[routeName]))
            : Object.assign({}, acc, (_a = {}, _a[routeName] = routes[routeName], _a));
    }), (/** @type {?} */ ({})));
});
/**
 * Returns the next hub value
 * @template R, C
 * @param {?} routeName
 * @param {?} routes
 * @return {?}
 */
function nextHubValue(routeName, routes) {
    var _a;
    /** @type {?} */
    var slice = entitify(routes);
    return (/** @type {?} */ (Object.assign({}, hub.value, (_a = {},
        _a[routeName] = slice,
        _a))));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Creates main parent routes
 * Entry point for the hub
 * @template R, C
 * @param {?} routes
 * @param {?=} routeName
 * @return {?}
 */
function createRoot(routes, routeName) {
    if (routeName === void 0) { routeName = 'app'; }
    if (hub.value !== null) {
        throw new Error('Routeshub is already declared');
    }
    /** @type {?} */
    var rootSlice = enhance(null, routes);
    /** @type {?} */
    var initialRoutesState = nextHubValue(routeName, rootSlice);
    hub.next(initialRoutesState);
    return hub.value[routeName];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Creates a feature route
 * @template R, C
 * @param {?} parentRoute
 * @param {?} routes
 * @return {?}
 */
function createFeature(parentRoute, routes) {
    /** @type {?} */
    var feature = enhance(parentRoute, routes);
    /** @type {?} */
    var updatedRouteState = nextHubValue(parentRoute.routeName, feature);
    hub.next(updatedRouteState);
    return hub.value[parentRoute.routeName];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { rootNote, createRoot, createFeature };

//# sourceMappingURL=routeshub.js.map