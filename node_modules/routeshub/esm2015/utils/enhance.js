/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { indexer } from './indexer';
import { checkMultiPath, splitPath } from './path';
import { setState, stateFn } from './state';
/**
 * Serializes routes
 * to enhance capabilities
 * @template R, C
 * @param {?} parentSlice
 * @param {?} routes
 * @return {?}
 */
export function enhance(parentSlice, routes) {
    return Object.keys(routes).reduce((/**
     * @param {?} acc
     * @param {?} routeName
     * @return {?}
     */
    (acc, routeName) => {
        const { children, path, lazy } = routes[routeName];
        /** @type {?} */
        const state = setState(parentSlice, path);
        /** @type {?} */
        const route = {
            id: indexer.next().value,
            parentId: parentSlice !== null ? parentSlice.id : null,
            state,
            stateFn: stateFn.bind(null, state),
            path: checkMultiPath(path) ? splitPath(path) : path,
            lazy: lazy || null,
            routeName
        };
        /* tslint:disable:prefer-object-spread */
        return Object.assign(acc, {
            [routeName]: Object.assign({}, route, { children: children !== undefined ? enhance(route, children) : null })
        });
    }), (/** @type {?} */ ({})));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5oYW5jZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3JvdXRlc2h1Yi8iLCJzb3VyY2VzIjpbInV0aWxzL2VuaGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTLENBQUM7Ozs7Ozs7OztBQWM1QyxNQUFNLFVBQVUsT0FBTyxDQUNyQixXQUE2QixFQUM3QixNQUE4QjtJQUU5QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTTs7Ozs7SUFDL0IsQ0FBQyxHQUFtQixFQUFFLFNBQWlCLEVBQWtCLEVBQUU7Y0FDbkQsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7O2NBQzVDLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQzs7Y0FDbkMsS0FBSyxHQUFHO1lBQ1osRUFBRSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLO1lBQ3hCLFFBQVEsRUFBRSxXQUFXLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJO1lBQ3RELEtBQUs7WUFDTCxPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO1lBQ2xDLElBQUksRUFBRSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUNuRCxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUk7WUFDbEIsU0FBUztTQUNWO1FBRUQseUNBQXlDO1FBQ3pDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDeEIsQ0FBQyxTQUFTLENBQUMsb0JBQ04sS0FBSyxJQUNSLFFBQVEsRUFBRSxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQ25FO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxHQUNELG1CQUFBLEVBQUUsRUFBa0IsQ0FDckIsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmRleGVyIH0gZnJvbSAnLi9pbmRleGVyJztcbmltcG9ydCB7IEludGVybmFsU2xpY2UsIFJvdXRlc05vdGVzLCBTbGljZSwgU3RydWN0dXJlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBjaGVja011bHRpUGF0aCwgc3BsaXRQYXRoIH0gZnJvbSAnLi9wYXRoJztcbmltcG9ydCB7IHNldFN0YXRlLCBzdGF0ZUZuIH0gZnJvbSAnLi9zdGF0ZSc7XG5cbi8qKlxuICogRGVzY3JpYmVzIGFuIG91dHB1dCBvZiBlbmhhbmNlIGZuXG4gKlxuICogQ291bGQgYmUgcGxhaW4gU2xpY2Ugb3IgaW50ZXJuYWwgc2xpY2VcbiAqIHdpdGggdW5wcm9jZXNzZWQgY2hpbGRyZW4gcm91dGVzXG4gKi9cbnR5cGUgRW5oYW5jZWQ8UiwgQz4gPSBTbGljZTxSPiB8IEludGVybmFsU2xpY2U8UiwgQz47XG5cbi8qKlxuICogU2VyaWFsaXplcyByb3V0ZXNcbiAqIHRvIGVuaGFuY2UgY2FwYWJpbGl0aWVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmhhbmNlPFIsIEMgPSB7fT4oXG4gIHBhcmVudFNsaWNlOiBTdHJ1Y3R1cmUgfCBudWxsLFxuICByb3V0ZXM6IFJvdXRlc05vdGVzPFIsIEMgfCB7fT5cbik6IEVuaGFuY2VkPFIsIEM+IHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHJvdXRlcykucmVkdWNlKFxuICAgIChhY2M6IEVuaGFuY2VkPFIsIEM+LCByb3V0ZU5hbWU6IHN0cmluZyk6IEVuaGFuY2VkPFIsIEM+ID0+IHtcbiAgICAgIGNvbnN0IHsgY2hpbGRyZW4sIHBhdGgsIGxhenkgfSA9IHJvdXRlc1tyb3V0ZU5hbWVdO1xuICAgICAgY29uc3Qgc3RhdGUgPSBzZXRTdGF0ZShwYXJlbnRTbGljZSwgcGF0aCk7XG4gICAgICBjb25zdCByb3V0ZSA9IHtcbiAgICAgICAgaWQ6IGluZGV4ZXIubmV4dCgpLnZhbHVlLFxuICAgICAgICBwYXJlbnRJZDogcGFyZW50U2xpY2UgIT09IG51bGwgPyBwYXJlbnRTbGljZS5pZCA6IG51bGwsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBzdGF0ZUZuOiBzdGF0ZUZuLmJpbmQobnVsbCwgc3RhdGUpLFxuICAgICAgICBwYXRoOiBjaGVja011bHRpUGF0aChwYXRoKSA/IHNwbGl0UGF0aChwYXRoKSA6IHBhdGgsXG4gICAgICAgIGxhenk6IGxhenkgfHwgbnVsbCxcbiAgICAgICAgcm91dGVOYW1lXG4gICAgICB9O1xuXG4gICAgICAvKiB0c2xpbnQ6ZGlzYWJsZTpwcmVmZXItb2JqZWN0LXNwcmVhZCAqL1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtyb3V0ZU5hbWVdOiB7XG4gICAgICAgICAgLi4ucm91dGUsXG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuICE9PSB1bmRlZmluZWQgPyBlbmhhbmNlKHJvdXRlLCBjaGlsZHJlbikgOiBudWxsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAge30gYXMgRW5oYW5jZWQ8UiwgQz5cbiAgKTtcbn1cbiJdfQ==