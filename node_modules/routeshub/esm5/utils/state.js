/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { setNotEmptyPath } from './path';
/**
 * Assigns a value based on the parent's  state and a current path
 * @type {?}
 */
export var setState = (/**
 * @param {?} parentSlice
 * @param {?} path
 * @return {?}
 */
function (parentSlice, path) {
    if (path.includes('*')) {
        return [path];
    }
    return parentSlice !== null
        ? setNotEmptyPath(parentSlice.state, path)
        : setNotEmptyPath(['/'], path);
});
/**
 * Absorbs and gives params out together
 * @type {?}
 */
var reduceParams = (/**
 * @param {?} params
 * @param {?} restParams
 * @return {?}
 */
function (params, restParams) {
    return restParams.reduce((/**
     * @param {?} accParams
     * @param {?} param
     * @return {?}
     */
    function (accParams, param) { return (tslib_1.__assign({}, accParams, param)); }), params);
});
var ɵ0 = reduceParams;
/**
 * Replaces property with a value
 * Helps stateFn generating dynamic values
 * @type {?}
 */
var handleState = (/**
 * @param {?} params
 * @param {?=} state
 * @return {?}
 */
function (params, state) {
    if (state === void 0) { state = []; }
    return Object.keys(params).reduce((/**
     * @param {?} accState
     * @param {?} param
     * @return {?}
     */
    function (accState, param) {
        return accState.map((/**
         * @param {?} slice
         * @return {?}
         */
        function (slice) {
            return slice === ":" + param ? params[param] : slice;
        }));
    }), state);
});
var ɵ1 = handleState;
/**
 * Supports dynamic paths
 * @param {?} state
 * @param {?=} params
 * @param {...?} otherParams
 * @return {?}
 */
export function stateFn(state, params) {
    var otherParams = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        otherParams[_i - 2] = arguments[_i];
    }
    if (!params) {
        return state;
    }
    /** @type {?} */
    var parameters = otherParams.length === 0 ? params : reduceParams(params, otherParams);
    return handleState(parameters, state);
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9yb3V0ZXNodWIvIiwic291cmNlcyI6WyJ1dGlscy9zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxRQUFRLENBQUM7Ozs7O0FBS3pDLE1BQU0sS0FBTyxRQUFROzs7OztBQUFHLFVBQUMsV0FBVyxFQUFFLElBQUk7SUFDeEMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNmO0lBRUQsT0FBTyxXQUFXLEtBQUssSUFBSTtRQUN6QixDQUFDLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDO1FBQzFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNuQyxDQUFDLENBQUE7Ozs7O0lBS0ssWUFBWTs7Ozs7QUFBRyxVQUFDLE1BQWMsRUFBRSxVQUFvQjtJQUN4RCxPQUFBLFVBQVUsQ0FBQyxNQUFNOzs7OztJQUNmLFVBQUMsU0FBaUIsRUFBRSxLQUFhLElBQWEsT0FBQSxzQkFDekMsU0FBUyxFQUNULEtBQUssRUFDUixFQUg0QyxDQUc1QyxHQUNGLE1BQU0sQ0FDUDtBQU5ELENBTUMsQ0FBQTs7Ozs7OztJQU1HLFdBQVc7Ozs7O0FBQUcsVUFBQyxNQUFjLEVBQUUsS0FBb0I7SUFBcEIsc0JBQUEsRUFBQSxVQUFvQjtJQUN2RCxPQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTTs7Ozs7SUFDeEIsVUFBQyxRQUFrQixFQUFFLEtBQWE7UUFDaEMsT0FBQSxRQUFRLENBQUMsR0FBRzs7OztRQUNWLFVBQUMsS0FBYTtZQUNaLE9BQUEsS0FBSyxLQUFLLE1BQUksS0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7UUFBN0MsQ0FBNkMsRUFDaEQ7SUFIRCxDQUdDLEdBQ0gsS0FBSyxDQUNOO0FBUEQsQ0FPQyxDQUFBOzs7Ozs7Ozs7QUFLSCxNQUFNLFVBQVUsT0FBTyxDQUNyQixLQUFLLEVBQ0wsTUFBZTtJQUNmLHFCQUF3QjtTQUF4QixVQUF3QixFQUF4QixxQkFBd0IsRUFBeEIsSUFBd0I7UUFBeEIsb0NBQXdCOztJQUV4QixJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1gsT0FBTyxLQUFLLENBQUM7S0FDZDs7UUFFSyxVQUFVLEdBQ2QsV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUM7SUFFdkUsT0FBTyxXQUFXLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJhbXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IHNldE5vdEVtcHR5UGF0aCB9IGZyb20gJy4vcGF0aCc7XG5cbi8qKlxuICogQXNzaWducyBhIHZhbHVlIGJhc2VkIG9uIHRoZSBwYXJlbnQncyAgc3RhdGUgYW5kIGEgY3VycmVudCBwYXRoXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRTdGF0ZSA9IChwYXJlbnRTbGljZSwgcGF0aCkgPT4ge1xuICBpZiAocGF0aC5pbmNsdWRlcygnKicpKSB7XG4gICAgcmV0dXJuIFtwYXRoXTtcbiAgfVxuXG4gIHJldHVybiBwYXJlbnRTbGljZSAhPT0gbnVsbFxuICAgID8gc2V0Tm90RW1wdHlQYXRoKHBhcmVudFNsaWNlLnN0YXRlLCBwYXRoKVxuICAgIDogc2V0Tm90RW1wdHlQYXRoKFsnLyddLCBwYXRoKTtcbn07XG5cbi8qKlxuICogQWJzb3JicyBhbmQgZ2l2ZXMgcGFyYW1zIG91dCB0b2dldGhlclxuICovXG5jb25zdCByZWR1Y2VQYXJhbXMgPSAocGFyYW1zOiBQYXJhbXMsIHJlc3RQYXJhbXM6IFBhcmFtc1tdKTogUGFyYW1zID0+XG4gIHJlc3RQYXJhbXMucmVkdWNlKFxuICAgIChhY2NQYXJhbXM6IFBhcmFtcywgcGFyYW06IFBhcmFtcyk6IFBhcmFtcyA9PiAoe1xuICAgICAgLi4uYWNjUGFyYW1zLFxuICAgICAgLi4ucGFyYW1cbiAgICB9KSxcbiAgICBwYXJhbXNcbiAgKTtcblxuLyoqXG4gKiBSZXBsYWNlcyBwcm9wZXJ0eSB3aXRoIGEgdmFsdWVcbiAqIEhlbHBzIHN0YXRlRm4gZ2VuZXJhdGluZyBkeW5hbWljIHZhbHVlc1xuICovXG5jb25zdCBoYW5kbGVTdGF0ZSA9IChwYXJhbXM6IFBhcmFtcywgc3RhdGU6IHN0cmluZ1tdID0gW10pOiBzdHJpbmdbXSA9PlxuICBPYmplY3Qua2V5cyhwYXJhbXMpLnJlZHVjZShcbiAgICAoYWNjU3RhdGU6IHN0cmluZ1tdLCBwYXJhbTogc3RyaW5nKTogc3RyaW5nW10gPT5cbiAgICAgIGFjY1N0YXRlLm1hcChcbiAgICAgICAgKHNsaWNlOiBzdHJpbmcpOiBzdHJpbmcgPT5cbiAgICAgICAgICBzbGljZSA9PT0gYDoke3BhcmFtfWAgPyBwYXJhbXNbcGFyYW1dIDogc2xpY2VcbiAgICAgICksXG4gICAgc3RhdGVcbiAgKTtcblxuLyoqXG4gKiBTdXBwb3J0cyBkeW5hbWljIHBhdGhzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGF0ZUZuKFxuICBzdGF0ZSxcbiAgcGFyYW1zPzogUGFyYW1zLFxuICAuLi5vdGhlclBhcmFtczogUGFyYW1zW11cbik6IHN0cmluZ1tdIHtcbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBjb25zdCBwYXJhbWV0ZXJzID1cbiAgICBvdGhlclBhcmFtcy5sZW5ndGggPT09IDAgPyBwYXJhbXMgOiByZWR1Y2VQYXJhbXMocGFyYW1zLCBvdGhlclBhcmFtcyk7XG5cbiAgcmV0dXJuIGhhbmRsZVN0YXRlKHBhcmFtZXRlcnMsIHN0YXRlKTtcbn1cbiJdfQ==