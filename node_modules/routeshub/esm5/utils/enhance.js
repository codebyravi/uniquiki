/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { indexer } from './indexer';
import { checkMultiPath, splitPath } from './path';
import { setState, stateFn } from './state';
/**
 * Serializes routes
 * to enhance capabilities
 * @template R, C
 * @param {?} parentSlice
 * @param {?} routes
 * @return {?}
 */
export function enhance(parentSlice, routes) {
    return Object.keys(routes).reduce((/**
     * @param {?} acc
     * @param {?} routeName
     * @return {?}
     */
    function (acc, routeName) {
        var _a;
        var _b = routes[routeName], children = _b.children, path = _b.path, lazy = _b.lazy;
        /** @type {?} */
        var state = setState(parentSlice, path);
        /** @type {?} */
        var route = {
            id: indexer.next().value,
            parentId: parentSlice !== null ? parentSlice.id : null,
            state: state,
            stateFn: stateFn.bind(null, state),
            path: checkMultiPath(path) ? splitPath(path) : path,
            lazy: lazy || null,
            routeName: routeName
        };
        /* tslint:disable:prefer-object-spread */
        return Object.assign(acc, (_a = {},
            _a[routeName] = tslib_1.__assign({}, route, { children: children !== undefined ? enhance(route, children) : null }),
            _a));
    }), (/** @type {?} */ ({})));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5oYW5jZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3JvdXRlc2h1Yi8iLCJzb3VyY2VzIjpbInV0aWxzL2VuaGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXBDLE9BQU8sRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDOzs7Ozs7Ozs7QUFjNUMsTUFBTSxVQUFVLE9BQU8sQ0FDckIsV0FBNkIsRUFDN0IsTUFBOEI7SUFFOUIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU07Ozs7O0lBQy9CLFVBQUMsR0FBbUIsRUFBRSxTQUFpQjs7UUFDL0IsSUFBQSxzQkFBNEMsRUFBMUMsc0JBQVEsRUFBRSxjQUFJLEVBQUUsY0FBMEI7O1lBQzVDLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQzs7WUFDbkMsS0FBSyxHQUFHO1lBQ1osRUFBRSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLO1lBQ3hCLFFBQVEsRUFBRSxXQUFXLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJO1lBQ3RELEtBQUssT0FBQTtZQUNMLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7WUFDbEMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO1lBQ25ELElBQUksRUFBRSxJQUFJLElBQUksSUFBSTtZQUNsQixTQUFTLFdBQUE7U0FDVjtRQUVELHlDQUF5QztRQUN6QyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRztZQUN0QixHQUFDLFNBQVMseUJBQ0wsS0FBSyxJQUNSLFFBQVEsRUFBRSxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQ25FO2dCQUNELENBQUM7SUFDTCxDQUFDLEdBQ0QsbUJBQUEsRUFBRSxFQUFrQixDQUNyQixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluZGV4ZXIgfSBmcm9tICcuL2luZGV4ZXInO1xuaW1wb3J0IHsgSW50ZXJuYWxTbGljZSwgUm91dGVzTm90ZXMsIFNsaWNlLCBTdHJ1Y3R1cmUgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IGNoZWNrTXVsdGlQYXRoLCBzcGxpdFBhdGggfSBmcm9tICcuL3BhdGgnO1xuaW1wb3J0IHsgc2V0U3RhdGUsIHN0YXRlRm4gfSBmcm9tICcuL3N0YXRlJztcblxuLyoqXG4gKiBEZXNjcmliZXMgYW4gb3V0cHV0IG9mIGVuaGFuY2UgZm5cbiAqXG4gKiBDb3VsZCBiZSBwbGFpbiBTbGljZSBvciBpbnRlcm5hbCBzbGljZVxuICogd2l0aCB1bnByb2Nlc3NlZCBjaGlsZHJlbiByb3V0ZXNcbiAqL1xudHlwZSBFbmhhbmNlZDxSLCBDPiA9IFNsaWNlPFI+IHwgSW50ZXJuYWxTbGljZTxSLCBDPjtcblxuLyoqXG4gKiBTZXJpYWxpemVzIHJvdXRlc1xuICogdG8gZW5oYW5jZSBjYXBhYmlsaXRpZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuaGFuY2U8UiwgQyA9IHt9PihcbiAgcGFyZW50U2xpY2U6IFN0cnVjdHVyZSB8IG51bGwsXG4gIHJvdXRlczogUm91dGVzTm90ZXM8UiwgQyB8IHt9PlxuKTogRW5oYW5jZWQ8UiwgQz4ge1xuICByZXR1cm4gT2JqZWN0LmtleXMocm91dGVzKS5yZWR1Y2UoXG4gICAgKGFjYzogRW5oYW5jZWQ8UiwgQz4sIHJvdXRlTmFtZTogc3RyaW5nKTogRW5oYW5jZWQ8UiwgQz4gPT4ge1xuICAgICAgY29uc3QgeyBjaGlsZHJlbiwgcGF0aCwgbGF6eSB9ID0gcm91dGVzW3JvdXRlTmFtZV07XG4gICAgICBjb25zdCBzdGF0ZSA9IHNldFN0YXRlKHBhcmVudFNsaWNlLCBwYXRoKTtcbiAgICAgIGNvbnN0IHJvdXRlID0ge1xuICAgICAgICBpZDogaW5kZXhlci5uZXh0KCkudmFsdWUsXG4gICAgICAgIHBhcmVudElkOiBwYXJlbnRTbGljZSAhPT0gbnVsbCA/IHBhcmVudFNsaWNlLmlkIDogbnVsbCxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHN0YXRlRm46IHN0YXRlRm4uYmluZChudWxsLCBzdGF0ZSksXG4gICAgICAgIHBhdGg6IGNoZWNrTXVsdGlQYXRoKHBhdGgpID8gc3BsaXRQYXRoKHBhdGgpIDogcGF0aCxcbiAgICAgICAgbGF6eTogbGF6eSB8fCBudWxsLFxuICAgICAgICByb3V0ZU5hbWVcbiAgICAgIH07XG5cbiAgICAgIC8qIHRzbGludDpkaXNhYmxlOnByZWZlci1vYmplY3Qtc3ByZWFkICovXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgW3JvdXRlTmFtZV06IHtcbiAgICAgICAgICAuLi5yb3V0ZSxcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4gIT09IHVuZGVmaW5lZCA/IGVuaGFuY2Uocm91dGUsIGNoaWxkcmVuKSA6IG51bGxcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICB7fSBhcyBFbmhhbmNlZDxSLCBDPlxuICApO1xufVxuIl19