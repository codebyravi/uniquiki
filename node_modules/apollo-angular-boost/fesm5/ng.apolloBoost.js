import { InjectionToken, Injectable, NgModule, Optional, Inject } from '@angular/core';
import { __assign } from 'tslib';
import { ApolloLink, Observable } from 'apollo-link';
export { createOperation, makePromise, toPromise, fromPromise, fromError, Observable, execute, empty, from, split, concat, ApolloLink } from 'apollo-link';
import { Apollo, ApolloModule } from 'apollo-angular';
export { ɵb, ɵa, Apollo, ApolloBase, QueryRef, Query, Mutation, Subscription, SelectPipe, ApolloModule, APOLLO_OPTIONS } from 'apollo-angular';
import { HttpLink, HttpLinkModule } from 'apollo-angular-link-http';
import { withClientState } from 'apollo-link-state';
import { onError } from 'apollo-link-error';
import { InMemoryCache } from 'apollo-cache-inmemory';
export { InMemoryCache, defaultDataIdFromObject, assertIdValue, StoreReader, enhanceErrorWithDocument, WriteError, StoreWriter, HeuristicFragmentMatcher, IntrospectionFragmentMatcher, defaultNormalizedCacheFactory, ObjectCache, record, RecordingCache } from 'apollo-cache-inmemory';
export { default as gql } from 'graphql-tag';
export { printAST, ObservableQuery, NetworkStatus, ApolloError, ApolloClient, FetchType } from 'apollo-client';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var APOLLO_BOOST_CONFIG = new InjectionToken('[apollo-angular-boost] config');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ApolloBoost = /** @class */ (function () {
    function ApolloBoost(apollo, httpLink) {
        this.apollo = apollo;
        this.httpLink = httpLink;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    ApolloBoost.prototype.create = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var cache = config && config.cacheRedirects
            ? new InMemoryCache({ cacheRedirects: config.cacheRedirects })
            : new InMemoryCache();
        /** @type {?} */
        var stateLink = config && config.clientState
            ? withClientState(__assign({}, config.clientState, { cache: cache }))
            : false;
        /** @type {?} */
        var errorLink = config && config.onError
            ? onError(config.onError)
            : onError(function (_a) {
                var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;
                if (graphQLErrors) {
                    graphQLErrors.map(function (_a) {
                        var message = _a.message, locations = _a.locations, path = _a.path;
                        // tslint:disable-next-line
                        return console.log("[GraphQL error]: Message: " + message + ", Location: " + locations + ", Path: " + path);
                    });
                }
                if (networkError) {
                    // tslint:disable-next-line
                    console.log("[Network error]: " + networkError);
                }
            });
        /** @type {?} */
        var requestHandler = config && config.request
            ? new ApolloLink(function (operation, forward) {
                return new Observable(function (observer) {
                    /** @type {?} */
                    var handle;
                    Promise.resolve(operation)
                        .then(function (oper) { return config.request(oper); })
                        .then(function () {
                        handle = forward(operation).subscribe({
                            next: observer.next.bind(observer),
                            error: observer.error.bind(observer),
                            complete: observer.complete.bind(observer),
                        });
                    })
                        .catch(observer.error.bind(observer));
                    return function () {
                        if (handle) {
                            handle.unsubscribe();
                        }
                    };
                });
            })
            : false;
        /** @type {?} */
        var httpLink = this.httpLink.create(__assign({}, ((config && config.httpOptions) || {}), { uri: (config && config.uri) || '/graphql' }));
        /** @type {?} */
        var link = ApolloLink.from((/** @type {?} */ ([
            errorLink,
            requestHandler,
            stateLink,
            httpLink,
        ].filter(function (x) { return !!x; }))));
        this.apollo.create({
            link: link,
            cache: cache,
        });
    };
    ApolloBoost.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ApolloBoost.ctorParameters = function () { return [
        { type: Apollo },
        { type: HttpLink }
    ]; };
    return ApolloBoost;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var ApolloBoostModule = /** @class */ (function () {
    function ApolloBoostModule(boost, config) {
        if (config) {
            boost.create(config);
        }
    }
    ApolloBoostModule.decorators = [
        { type: NgModule, args: [{
                    imports: [ApolloModule, HttpLinkModule],
                    providers: [ApolloBoost],
                },] }
    ];
    /** @nocollapse */
    ApolloBoostModule.ctorParameters = function () { return [
        { type: ApolloBoost },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_BOOST_CONFIG,] }] }
    ]; };
    return ApolloBoostModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { APOLLO_BOOST_CONFIG, ApolloBoost, ApolloBoostModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,