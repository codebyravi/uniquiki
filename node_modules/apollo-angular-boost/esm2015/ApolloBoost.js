/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ApolloLink, Observable } from 'apollo-link';
import { Apollo } from 'apollo-angular';
import { HttpLink } from 'apollo-angular-link-http';
import { withClientState } from 'apollo-link-state';
import { onError } from 'apollo-link-error';
import { InMemoryCache } from 'apollo-cache-inmemory';
export class ApolloBoost {
    /**
     * @param {?} apollo
     * @param {?} httpLink
     */
    constructor(apollo, httpLink) {
        this.apollo = apollo;
        this.httpLink = httpLink;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    create(config) {
        /** @type {?} */
        const cache = config && config.cacheRedirects
            ? new InMemoryCache({ cacheRedirects: config.cacheRedirects })
            : new InMemoryCache();
        /** @type {?} */
        const stateLink = config && config.clientState
            ? withClientState(Object.assign({}, config.clientState, { cache }))
            : false;
        /** @type {?} */
        const errorLink = config && config.onError
            ? onError(config.onError)
            : onError(({ graphQLErrors, networkError }) => {
                if (graphQLErrors) {
                    graphQLErrors.map(({ message, locations, path }) => 
                    // tslint:disable-next-line
                    console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));
                }
                if (networkError) {
                    // tslint:disable-next-line
                    console.log(`[Network error]: ${networkError}`);
                }
            });
        /** @type {?} */
        const requestHandler = config && config.request
            ? new ApolloLink((operation, forward) => new Observable(observer => {
                /** @type {?} */
                let handle;
                Promise.resolve(operation)
                    .then(oper => config.request(oper))
                    .then(() => {
                    handle = forward(operation).subscribe({
                        next: observer.next.bind(observer),
                        error: observer.error.bind(observer),
                        complete: observer.complete.bind(observer),
                    });
                })
                    .catch(observer.error.bind(observer));
                return () => {
                    if (handle) {
                        handle.unsubscribe();
                    }
                };
            }))
            : false;
        /** @type {?} */
        const httpLink = this.httpLink.create(Object.assign({}, ((config && config.httpOptions) || {}), { uri: (config && config.uri) || '/graphql' }));
        /** @type {?} */
        const link = ApolloLink.from((/** @type {?} */ ([
            errorLink,
            requestHandler,
            stateLink,
            httpLink,
        ].filter(x => !!x))));
        this.apollo.create({
            link,
            cache,
        });
    }
}
ApolloBoost.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ApolloBoost.ctorParameters = () => [
    { type: Apollo },
    { type: HttpLink }
];
if (false) {
    /** @type {?} */
    ApolloBoost.prototype.apollo;
    /** @type {?} */
    ApolloBoost.prototype.httpLink;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBvbGxvQm9vc3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hcG9sbG8tYW5ndWxhci1ib29zdC8iLCJzb3VyY2VzIjpbIkFwb2xsb0Jvb3N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxVQUFVLEVBQUUsVUFBVSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ25ELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMxQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFLcEQsTUFBTSxPQUFPLFdBQVc7Ozs7O0lBQ3RCLFlBQW9CLE1BQWMsRUFBVSxRQUFrQjtRQUExQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFHLENBQUM7Ozs7O0lBRTNELE1BQU0sQ0FBQyxNQUFvQjs7Y0FDMUIsS0FBSyxHQUNULE1BQU0sSUFBSSxNQUFNLENBQUMsY0FBYztZQUM3QixDQUFDLENBQUMsSUFBSSxhQUFhLENBQUMsRUFBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLGNBQWMsRUFBQyxDQUFDO1lBQzVELENBQUMsQ0FBQyxJQUFJLGFBQWEsRUFBRTs7Y0FFbkIsU0FBUyxHQUNiLE1BQU0sSUFBSSxNQUFNLENBQUMsV0FBVztZQUMxQixDQUFDLENBQUMsZUFBZSxtQkFBSyxNQUFNLENBQUMsV0FBVyxJQUFFLEtBQUssSUFBRTtZQUNqRCxDQUFDLENBQUMsS0FBSzs7Y0FFTCxTQUFTLEdBQ2IsTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPO1lBQ3RCLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUN6QixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBQyxhQUFhLEVBQUUsWUFBWSxFQUFDLEVBQUUsRUFBRTtnQkFDeEMsSUFBSSxhQUFhLEVBQUU7b0JBQ2pCLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDLEVBQUUsRUFBRTtvQkFDL0MsMkJBQTJCO29CQUMzQixPQUFPLENBQUMsR0FBRyxDQUNULDZCQUE2QixPQUFPLGVBQWUsU0FBUyxXQUFXLElBQUksRUFBRSxDQUM5RSxDQUNGLENBQUM7aUJBQ0g7Z0JBQ0QsSUFBSSxZQUFZLEVBQUU7b0JBQ2hCLDJCQUEyQjtvQkFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsWUFBWSxFQUFFLENBQUMsQ0FBQztpQkFDakQ7WUFDSCxDQUFDLENBQUM7O2NBRUYsY0FBYyxHQUNsQixNQUFNLElBQUksTUFBTSxDQUFDLE9BQU87WUFDdEIsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUNaLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQ3JCLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFOztvQkFDcEIsTUFBVztnQkFDZixPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztxQkFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztxQkFDbEMsSUFBSSxDQUFDLEdBQUcsRUFBRTtvQkFDVCxNQUFNLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQzt3QkFDcEMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzt3QkFDbEMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQzt3QkFDcEMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztxQkFDM0MsQ0FBQyxDQUFDO2dCQUNMLENBQUMsQ0FBQztxQkFDRCxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFFeEMsT0FBTyxHQUFHLEVBQUU7b0JBQ1YsSUFBSSxNQUFNLEVBQUU7d0JBQ1YsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO3FCQUN0QjtnQkFDSCxDQUFDLENBQUM7WUFDSixDQUFDLENBQUMsQ0FDTDtZQUNILENBQUMsQ0FBQyxLQUFLOztjQUVMLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sbUJBQ2hDLENBQUMsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUN6QyxHQUFHLEVBQUUsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFVBQVUsSUFDekM7O2NBRUksSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsbUJBQUE7WUFDM0IsU0FBUztZQUNULGNBQWM7WUFDZCxTQUFTO1lBQ1QsUUFBUTtTQUNULENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFnQixDQUFDO1FBRW5DLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ2pCLElBQUk7WUFDSixLQUFLO1NBQ04sQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBM0VGLFVBQVU7Ozs7WUFSSCxNQUFNO1lBQ04sUUFBUTs7OztJQVNGLDZCQUFzQjs7SUFBRSwrQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBcG9sbG9MaW5rLCBPYnNlcnZhYmxlfSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQge0Fwb2xsb30gZnJvbSAnYXBvbGxvLWFuZ3VsYXInO1xuaW1wb3J0IHtIdHRwTGlua30gZnJvbSAnYXBvbGxvLWFuZ3VsYXItbGluay1odHRwJztcbmltcG9ydCB7d2l0aENsaWVudFN0YXRlfSBmcm9tICdhcG9sbG8tbGluay1zdGF0ZSc7XG5pbXBvcnQge29uRXJyb3J9IGZyb20gJ2Fwb2xsby1saW5rLWVycm9yJztcbmltcG9ydCB7SW5NZW1vcnlDYWNoZX0gZnJvbSAnYXBvbGxvLWNhY2hlLWlubWVtb3J5JztcblxuaW1wb3J0IHtQcmVzZXRDb25maWd9IGZyb20gJy4vdHlwZXMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXBvbGxvQm9vc3Qge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwb2xsbzogQXBvbGxvLCBwcml2YXRlIGh0dHBMaW5rOiBIdHRwTGluaykge31cblxuICBwdWJsaWMgY3JlYXRlKGNvbmZpZzogUHJlc2V0Q29uZmlnKSB7XG4gICAgY29uc3QgY2FjaGUgPVxuICAgICAgY29uZmlnICYmIGNvbmZpZy5jYWNoZVJlZGlyZWN0c1xuICAgICAgICA/IG5ldyBJbk1lbW9yeUNhY2hlKHtjYWNoZVJlZGlyZWN0czogY29uZmlnLmNhY2hlUmVkaXJlY3RzfSlcbiAgICAgICAgOiBuZXcgSW5NZW1vcnlDYWNoZSgpO1xuXG4gICAgY29uc3Qgc3RhdGVMaW5rID1cbiAgICAgIGNvbmZpZyAmJiBjb25maWcuY2xpZW50U3RhdGVcbiAgICAgICAgPyB3aXRoQ2xpZW50U3RhdGUoey4uLmNvbmZpZy5jbGllbnRTdGF0ZSwgY2FjaGV9KVxuICAgICAgICA6IGZhbHNlO1xuXG4gICAgY29uc3QgZXJyb3JMaW5rID1cbiAgICAgIGNvbmZpZyAmJiBjb25maWcub25FcnJvclxuICAgICAgICA/IG9uRXJyb3IoY29uZmlnLm9uRXJyb3IpXG4gICAgICAgIDogb25FcnJvcigoe2dyYXBoUUxFcnJvcnMsIG5ldHdvcmtFcnJvcn0pID0+IHtcbiAgICAgICAgICAgIGlmIChncmFwaFFMRXJyb3JzKSB7XG4gICAgICAgICAgICAgIGdyYXBoUUxFcnJvcnMubWFwKCh7bWVzc2FnZSwgbG9jYXRpb25zLCBwYXRofSkgPT5cbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgIGBbR3JhcGhRTCBlcnJvcl06IE1lc3NhZ2U6ICR7bWVzc2FnZX0sIExvY2F0aW9uOiAke2xvY2F0aW9uc30sIFBhdGg6ICR7cGF0aH1gLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV0d29ya0Vycm9yKSB7XG4gICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW05ldHdvcmsgZXJyb3JdOiAke25ldHdvcmtFcnJvcn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgIGNvbnN0IHJlcXVlc3RIYW5kbGVyID1cbiAgICAgIGNvbmZpZyAmJiBjb25maWcucmVxdWVzdFxuICAgICAgICA/IG5ldyBBcG9sbG9MaW5rKFxuICAgICAgICAgICAgKG9wZXJhdGlvbiwgZm9yd2FyZCkgPT5cbiAgICAgICAgICAgICAgbmV3IE9ic2VydmFibGUob2JzZXJ2ZXIgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBoYW5kbGU6IGFueTtcbiAgICAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUob3BlcmF0aW9uKVxuICAgICAgICAgICAgICAgICAgLnRoZW4ob3BlciA9PiBjb25maWcucmVxdWVzdChvcGVyKSlcbiAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlID0gZm9yd2FyZChvcGVyYXRpb24pLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgICAgICAgICAgbmV4dDogb2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKSxcbiAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXIuZXJyb3IuYmluZChvYnNlcnZlciksXG4gICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IG9ic2VydmVyLmNvbXBsZXRlLmJpbmQob2JzZXJ2ZXIpLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAuY2F0Y2gob2JzZXJ2ZXIuZXJyb3IuYmluZChvYnNlcnZlcikpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgKVxuICAgICAgICA6IGZhbHNlO1xuXG4gICAgY29uc3QgaHR0cExpbmsgPSB0aGlzLmh0dHBMaW5rLmNyZWF0ZSh7XG4gICAgICAuLi4oKGNvbmZpZyAmJiBjb25maWcuaHR0cE9wdGlvbnMpIHx8IHt9KSxcbiAgICAgIHVyaTogKGNvbmZpZyAmJiBjb25maWcudXJpKSB8fCAnL2dyYXBocWwnLFxuICAgIH0pO1xuXG4gICAgY29uc3QgbGluayA9IEFwb2xsb0xpbmsuZnJvbShbXG4gICAgICBlcnJvckxpbmssXG4gICAgICByZXF1ZXN0SGFuZGxlcixcbiAgICAgIHN0YXRlTGluayxcbiAgICAgIGh0dHBMaW5rLFxuICAgIF0uZmlsdGVyKHggPT4gISF4KSBhcyBBcG9sbG9MaW5rW10pO1xuXG4gICAgdGhpcy5hcG9sbG8uY3JlYXRlKHtcbiAgICAgIGxpbmssXG4gICAgICBjYWNoZSxcbiAgICB9KTtcbiAgfVxufVxuIl19