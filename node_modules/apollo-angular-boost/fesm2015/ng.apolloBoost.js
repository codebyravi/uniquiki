import { InjectionToken, Injectable, NgModule, Optional, Inject } from '@angular/core';
import { ApolloLink, Observable } from 'apollo-link';
export { createOperation, makePromise, toPromise, fromPromise, fromError, Observable, execute, empty, from, split, concat, ApolloLink } from 'apollo-link';
import { Apollo, ApolloModule } from 'apollo-angular';
export { ɵb, ɵa, Apollo, ApolloBase, QueryRef, Query, Mutation, Subscription, SelectPipe, ApolloModule, APOLLO_OPTIONS } from 'apollo-angular';
import { HttpLink, HttpLinkModule } from 'apollo-angular-link-http';
import { withClientState } from 'apollo-link-state';
import { onError } from 'apollo-link-error';
import { InMemoryCache } from 'apollo-cache-inmemory';
export { InMemoryCache, defaultDataIdFromObject, assertIdValue, StoreReader, enhanceErrorWithDocument, WriteError, StoreWriter, HeuristicFragmentMatcher, IntrospectionFragmentMatcher, defaultNormalizedCacheFactory, ObjectCache, record, RecordingCache } from 'apollo-cache-inmemory';
export { default as gql } from 'graphql-tag';
export { printAST, ObservableQuery, NetworkStatus, ApolloError, ApolloClient, FetchType } from 'apollo-client';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const APOLLO_BOOST_CONFIG = new InjectionToken('[apollo-angular-boost] config');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ApolloBoost {
    /**
     * @param {?} apollo
     * @param {?} httpLink
     */
    constructor(apollo, httpLink) {
        this.apollo = apollo;
        this.httpLink = httpLink;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    create(config) {
        /** @type {?} */
        const cache = config && config.cacheRedirects
            ? new InMemoryCache({ cacheRedirects: config.cacheRedirects })
            : new InMemoryCache();
        /** @type {?} */
        const stateLink = config && config.clientState
            ? withClientState(Object.assign({}, config.clientState, { cache }))
            : false;
        /** @type {?} */
        const errorLink = config && config.onError
            ? onError(config.onError)
            : onError(({ graphQLErrors, networkError }) => {
                if (graphQLErrors) {
                    graphQLErrors.map(({ message, locations, path }) => 
                    // tslint:disable-next-line
                    console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));
                }
                if (networkError) {
                    // tslint:disable-next-line
                    console.log(`[Network error]: ${networkError}`);
                }
            });
        /** @type {?} */
        const requestHandler = config && config.request
            ? new ApolloLink((operation, forward) => new Observable(observer => {
                /** @type {?} */
                let handle;
                Promise.resolve(operation)
                    .then(oper => config.request(oper))
                    .then(() => {
                    handle = forward(operation).subscribe({
                        next: observer.next.bind(observer),
                        error: observer.error.bind(observer),
                        complete: observer.complete.bind(observer),
                    });
                })
                    .catch(observer.error.bind(observer));
                return () => {
                    if (handle) {
                        handle.unsubscribe();
                    }
                };
            }))
            : false;
        /** @type {?} */
        const httpLink = this.httpLink.create(Object.assign({}, ((config && config.httpOptions) || {}), { uri: (config && config.uri) || '/graphql' }));
        /** @type {?} */
        const link = ApolloLink.from((/** @type {?} */ ([
            errorLink,
            requestHandler,
            stateLink,
            httpLink,
        ].filter(x => !!x))));
        this.apollo.create({
            link,
            cache,
        });
    }
}
ApolloBoost.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ApolloBoost.ctorParameters = () => [
    { type: Apollo },
    { type: HttpLink }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class ApolloBoostModule {
    /**
     * @param {?} boost
     * @param {?=} config
     */
    constructor(boost, config) {
        if (config) {
            boost.create(config);
        }
    }
}
ApolloBoostModule.decorators = [
    { type: NgModule, args: [{
                imports: [ApolloModule, HttpLinkModule],
                providers: [ApolloBoost],
            },] }
];
/** @nocollapse */
ApolloBoostModule.ctorParameters = () => [
    { type: ApolloBoost },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APOLLO_BOOST_CONFIG,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { APOLLO_BOOST_CONFIG, ApolloBoost, ApolloBoostModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcuYXBvbGxvQm9vc3QuanMubWFwIiwic291cmNlcyI6WyJuZzovL2Fwb2xsby1hbmd1bGFyLWJvb3N0L3Rva2Vucy50cyIsIm5nOi8vYXBvbGxvLWFuZ3VsYXItYm9vc3QvQXBvbGxvQm9vc3QudHMiLCJuZzovL2Fwb2xsby1hbmd1bGFyLWJvb3N0L0Fwb2xsb0Jvb3N0TW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1ByZXNldENvbmZpZ30gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBBUE9MTE9fQk9PU1RfQ09ORklHID0gbmV3IEluamVjdGlvblRva2VuPFByZXNldENvbmZpZz4oXG4gICdbYXBvbGxvLWFuZ3VsYXItYm9vc3RdIGNvbmZpZycsXG4pO1xuIiwiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QXBvbGxvTGluaywgT2JzZXJ2YWJsZX0gZnJvbSAnYXBvbGxvLWxpbmsnO1xuaW1wb3J0IHtBcG9sbG99IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcbmltcG9ydCB7SHR0cExpbmt9IGZyb20gJ2Fwb2xsby1hbmd1bGFyLWxpbmstaHR0cCc7XG5pbXBvcnQge3dpdGhDbGllbnRTdGF0ZX0gZnJvbSAnYXBvbGxvLWxpbmstc3RhdGUnO1xuaW1wb3J0IHtvbkVycm9yfSBmcm9tICdhcG9sbG8tbGluay1lcnJvcic7XG5pbXBvcnQge0luTWVtb3J5Q2FjaGV9IGZyb20gJ2Fwb2xsby1jYWNoZS1pbm1lbW9yeSc7XG5cbmltcG9ydCB7UHJlc2V0Q29uZmlnfSBmcm9tICcuL3R5cGVzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFwb2xsb0Jvb3N0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcG9sbG86IEFwb2xsbywgcHJpdmF0ZSBodHRwTGluazogSHR0cExpbmspIHt9XG5cbiAgcHVibGljIGNyZWF0ZShjb25maWc6IFByZXNldENvbmZpZykge1xuICAgIGNvbnN0IGNhY2hlID1cbiAgICAgIGNvbmZpZyAmJiBjb25maWcuY2FjaGVSZWRpcmVjdHNcbiAgICAgICAgPyBuZXcgSW5NZW1vcnlDYWNoZSh7Y2FjaGVSZWRpcmVjdHM6IGNvbmZpZy5jYWNoZVJlZGlyZWN0c30pXG4gICAgICAgIDogbmV3IEluTWVtb3J5Q2FjaGUoKTtcblxuICAgIGNvbnN0IHN0YXRlTGluayA9XG4gICAgICBjb25maWcgJiYgY29uZmlnLmNsaWVudFN0YXRlXG4gICAgICAgID8gd2l0aENsaWVudFN0YXRlKHsuLi5jb25maWcuY2xpZW50U3RhdGUsIGNhY2hlfSlcbiAgICAgICAgOiBmYWxzZTtcblxuICAgIGNvbnN0IGVycm9yTGluayA9XG4gICAgICBjb25maWcgJiYgY29uZmlnLm9uRXJyb3JcbiAgICAgICAgPyBvbkVycm9yKGNvbmZpZy5vbkVycm9yKVxuICAgICAgICA6IG9uRXJyb3IoKHtncmFwaFFMRXJyb3JzLCBuZXR3b3JrRXJyb3J9KSA9PiB7XG4gICAgICAgICAgICBpZiAoZ3JhcGhRTEVycm9ycykge1xuICAgICAgICAgICAgICBncmFwaFFMRXJyb3JzLm1hcCgoe21lc3NhZ2UsIGxvY2F0aW9ucywgcGF0aH0pID0+XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICBgW0dyYXBoUUwgZXJyb3JdOiBNZXNzYWdlOiAke21lc3NhZ2V9LCBMb2NhdGlvbjogJHtsb2NhdGlvbnN9LCBQYXRoOiAke3BhdGh9YCxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ldHdvcmtFcnJvcikge1xuICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYFtOZXR3b3JrIGVycm9yXTogJHtuZXR3b3JrRXJyb3J9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICBjb25zdCByZXF1ZXN0SGFuZGxlciA9XG4gICAgICBjb25maWcgJiYgY29uZmlnLnJlcXVlc3RcbiAgICAgICAgPyBuZXcgQXBvbGxvTGluayhcbiAgICAgICAgICAgIChvcGVyYXRpb24sIGZvcndhcmQpID0+XG4gICAgICAgICAgICAgIG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgaGFuZGxlOiBhbnk7XG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKG9wZXJhdGlvbilcbiAgICAgICAgICAgICAgICAgIC50aGVuKG9wZXIgPT4gY29uZmlnLnJlcXVlc3Qob3BlcikpXG4gICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZSA9IGZvcndhcmQob3BlcmF0aW9uKS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlciksXG4gICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBvYnNlcnZlci5jb21wbGV0ZS5iaW5kKG9ic2VydmVyKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgLmNhdGNoKG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoaGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgIClcbiAgICAgICAgOiBmYWxzZTtcblxuICAgIGNvbnN0IGh0dHBMaW5rID0gdGhpcy5odHRwTGluay5jcmVhdGUoe1xuICAgICAgLi4uKChjb25maWcgJiYgY29uZmlnLmh0dHBPcHRpb25zKSB8fCB7fSksXG4gICAgICB1cmk6IChjb25maWcgJiYgY29uZmlnLnVyaSkgfHwgJy9ncmFwaHFsJyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGxpbmsgPSBBcG9sbG9MaW5rLmZyb20oW1xuICAgICAgZXJyb3JMaW5rLFxuICAgICAgcmVxdWVzdEhhbmRsZXIsXG4gICAgICBzdGF0ZUxpbmssXG4gICAgICBodHRwTGluayxcbiAgICBdLmZpbHRlcih4ID0+ICEheCkgYXMgQXBvbGxvTGlua1tdKTtcblxuICAgIHRoaXMuYXBvbGxvLmNyZWF0ZSh7XG4gICAgICBsaW5rLFxuICAgICAgY2FjaGUsXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7TmdNb2R1bGUsIE9wdGlvbmFsLCBJbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBcG9sbG9Nb2R1bGV9IGZyb20gJ2Fwb2xsby1hbmd1bGFyJztcbmltcG9ydCB7SHR0cExpbmtNb2R1bGV9IGZyb20gJ2Fwb2xsby1hbmd1bGFyLWxpbmstaHR0cCc7XG5cbmltcG9ydCB7QXBvbGxvQm9vc3R9IGZyb20gJy4vQXBvbGxvQm9vc3QnO1xuaW1wb3J0IHtBUE9MTE9fQk9PU1RfQ09ORklHfSBmcm9tICcuL3Rva2Vucyc7XG5pbXBvcnQge1ByZXNldENvbmZpZ30gZnJvbSAnLi90eXBlcyc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtBcG9sbG9Nb2R1bGUsIEh0dHBMaW5rTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbQXBvbGxvQm9vc3RdLFxufSlcbmV4cG9ydCBjbGFzcyBBcG9sbG9Cb29zdE1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGJvb3N0OiBBcG9sbG9Cb29zdCxcbiAgICBAT3B0aW9uYWwoKVxuICAgIEBJbmplY3QoQVBPTExPX0JPT1NUX0NPTkZJRylcbiAgICBjb25maWc/OiBQcmVzZXRDb25maWcsXG4gICkge1xuICAgIGlmIChjb25maWcpIHtcbiAgICAgIGJvb3N0LmNyZWF0ZShjb25maWcpO1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFJQSxNQUFhLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUNuRCwrQkFBK0IsQ0FDaEM7Ozs7OztBQ05ELE1BV2EsV0FBVzs7Ozs7SUFDdEIsWUFBb0IsTUFBYyxFQUFVLFFBQWtCO1FBQTFDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO0tBQUk7Ozs7O0lBRTNELE1BQU0sQ0FBQyxNQUFvQjs7Y0FDMUIsS0FBSyxHQUNULE1BQU0sSUFBSSxNQUFNLENBQUMsY0FBYztjQUMzQixJQUFJLGFBQWEsQ0FBQyxFQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsY0FBYyxFQUFDLENBQUM7Y0FDMUQsSUFBSSxhQUFhLEVBQUU7O2NBRW5CLFNBQVMsR0FDYixNQUFNLElBQUksTUFBTSxDQUFDLFdBQVc7Y0FDeEIsZUFBZSxtQkFBSyxNQUFNLENBQUMsV0FBVyxJQUFFLEtBQUssSUFBRTtjQUMvQyxLQUFLOztjQUVMLFNBQVMsR0FDYixNQUFNLElBQUksTUFBTSxDQUFDLE9BQU87Y0FDcEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7Y0FDdkIsT0FBTyxDQUFDLENBQUMsRUFBQyxhQUFhLEVBQUUsWUFBWSxFQUFDO2dCQUNwQyxJQUFJLGFBQWEsRUFBRTtvQkFDakIsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUM7O29CQUUzQyxPQUFPLENBQUMsR0FBRyxDQUNULDZCQUE2QixPQUFPLGVBQWUsU0FBUyxXQUFXLElBQUksRUFBRSxDQUM5RSxDQUNGLENBQUM7aUJBQ0g7Z0JBQ0QsSUFBSSxZQUFZLEVBQUU7O29CQUVoQixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixZQUFZLEVBQUUsQ0FBQyxDQUFDO2lCQUNqRDthQUNGLENBQUM7O2NBRUYsY0FBYyxHQUNsQixNQUFNLElBQUksTUFBTSxDQUFDLE9BQU87Y0FDcEIsSUFBSSxVQUFVLENBQ1osQ0FBQyxTQUFTLEVBQUUsT0FBTyxLQUNqQixJQUFJLFVBQVUsQ0FBQyxRQUFROztvQkFDakIsTUFBVztnQkFDZixPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztxQkFDdkIsSUFBSSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUNsQyxJQUFJLENBQUM7b0JBQ0osTUFBTSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUM7d0JBQ3BDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7d0JBQ2xDLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7d0JBQ3BDLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7cUJBQzNDLENBQUMsQ0FBQztpQkFDSixDQUFDO3FCQUNELEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUV4QyxPQUFPO29CQUNMLElBQUksTUFBTSxFQUFFO3dCQUNWLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztxQkFDdEI7aUJBQ0YsQ0FBQzthQUNILENBQUMsQ0FDTDtjQUNELEtBQUs7O2NBRUwsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxvQkFDL0IsQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLFdBQVcsS0FBSyxFQUFFLEtBQ3hDLEdBQUcsRUFBRSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxLQUFLLFVBQVUsSUFDekM7O2NBRUksSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLG9CQUFDO1lBQzNCLFNBQVM7WUFDVCxjQUFjO1lBQ2QsU0FBUztZQUNULFFBQVE7U0FDVCxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFpQjtRQUVuQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNqQixJQUFJO1lBQ0osS0FBSztTQUNOLENBQUMsQ0FBQztLQUNKOzs7WUEzRUYsVUFBVTs7OztZQVJILE1BQU07WUFDTixRQUFROzs7Ozs7O0FDSGhCLE1BWWEsaUJBQWlCOzs7OztJQUM1QixZQUNFLEtBQWtCLEVBR2xCLE1BQXFCO1FBRXJCLElBQUksTUFBTSxFQUFFO1lBQ1YsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN0QjtLQUNGOzs7WUFkRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQztnQkFDdkMsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDO2FBQ3pCOzs7O1lBUE8sV0FBVzs0Q0FXZCxRQUFRLFlBQ1IsTUFBTSxTQUFDLG1CQUFtQjs7Ozs7Ozs7Ozs7Ozs7OyJ9