(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('apollo-link'), require('apollo-angular'), require('apollo-angular-link-http'), require('apollo-link-state'), require('apollo-link-error'), require('apollo-cache-inmemory'), require('graphql-tag'), require('apollo-client')) :
    typeof define === 'function' && define.amd ? define('apollo-angular-boost', ['exports', '@angular/core', 'apollo-link', 'apollo-angular', 'apollo-angular-link-http', 'apollo-link-state', 'apollo-link-error', 'apollo-cache-inmemory', 'graphql-tag', 'apollo-client'], factory) :
    (factory((global['apollo-angular-boost'] = {}),global.ng.core,global.apolloLink.core,global.ng.apollo,global.ng.apolloLink.http,global.apolloLink.state,global.apolloLink.error,global.apollo.cache.inmemory,global.graphqlTag,global.apollo));
}(this, (function (exports,core,apolloLink,apolloAngular,apolloAngularLinkHttp,apolloLinkState,apolloLinkError,apolloCacheInmemory,graphqlTag,apolloClient) { 'use strict';

    graphqlTag = graphqlTag && graphqlTag.hasOwnProperty('default') ? graphqlTag['default'] : graphqlTag;
    var apolloClient__default = 'default' in apolloClient ? apolloClient['default'] : apolloClient;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var APOLLO_BOOST_CONFIG = new core.InjectionToken('[apollo-angular-boost] config');

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ApolloBoost = /** @class */ (function () {
        function ApolloBoost(apollo, httpLink) {
            this.apollo = apollo;
            this.httpLink = httpLink;
        }
        /**
         * @param {?} config
         * @return {?}
         */
        ApolloBoost.prototype.create = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                /** @type {?} */
                var cache = config && config.cacheRedirects
                    ? new apolloCacheInmemory.InMemoryCache({ cacheRedirects: config.cacheRedirects })
                    : new apolloCacheInmemory.InMemoryCache();
                /** @type {?} */
                var stateLink = config && config.clientState
                    ? apolloLinkState.withClientState(__assign({}, config.clientState, { cache: cache }))
                    : false;
                /** @type {?} */
                var errorLink = config && config.onError
                    ? apolloLinkError.onError(config.onError)
                    : apolloLinkError.onError(function (_a) {
                        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;
                        if (graphQLErrors) {
                            graphQLErrors.map(function (_a) {
                                var message = _a.message, locations = _a.locations, path = _a.path;
                                // tslint:disable-next-line
                                return console.log("[GraphQL error]: Message: " + message + ", Location: " + locations + ", Path: " + path);
                            });
                        }
                        if (networkError) {
                            // tslint:disable-next-line
                            console.log("[Network error]: " + networkError);
                        }
                    });
                /** @type {?} */
                var requestHandler = config && config.request
                    ? new apolloLink.ApolloLink(function (operation, forward) {
                        return new apolloLink.Observable(function (observer) {
                            /** @type {?} */
                            var handle;
                            Promise.resolve(operation)
                                .then(function (oper) { return config.request(oper); })
                                .then(function () {
                                handle = forward(operation).subscribe({
                                    next: observer.next.bind(observer),
                                    error: observer.error.bind(observer),
                                    complete: observer.complete.bind(observer),
                                });
                            })
                                .catch(observer.error.bind(observer));
                            return function () {
                                if (handle) {
                                    handle.unsubscribe();
                                }
                            };
                        });
                    })
                    : false;
                /** @type {?} */
                var httpLink = this.httpLink.create(__assign({}, ((config && config.httpOptions) || {}), { uri: (config && config.uri) || '/graphql' }));
                /** @type {?} */
                var link = apolloLink.ApolloLink.from(( /** @type {?} */([
                    errorLink,
                    requestHandler,
                    stateLink,
                    httpLink,
                ].filter(function (x) { return !!x; }))));
                this.apollo.create({
                    link: link,
                    cache: cache,
                });
            };
        ApolloBoost.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ApolloBoost.ctorParameters = function () {
            return [
                { type: apolloAngular.Apollo },
                { type: apolloAngularLinkHttp.HttpLink }
            ];
        };
        return ApolloBoost;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var ApolloBoostModule = /** @class */ (function () {
        function ApolloBoostModule(boost, config) {
            if (config) {
                boost.create(config);
            }
        }
        ApolloBoostModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [apolloAngular.ApolloModule, apolloAngularLinkHttp.HttpLinkModule],
                        providers: [ApolloBoost],
                    },] }
        ];
        /** @nocollapse */
        ApolloBoostModule.ctorParameters = function () {
            return [
                { type: ApolloBoost },
                { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [APOLLO_BOOST_CONFIG,] }] }
            ];
        };
        return ApolloBoostModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.createOperation = apolloLink.createOperation;
    exports.makePromise = apolloLink.makePromise;
    exports.toPromise = apolloLink.toPromise;
    exports.fromPromise = apolloLink.fromPromise;
    exports.fromError = apolloLink.fromError;
    exports.Observable = apolloLink.Observable;
    exports.execute = apolloLink.execute;
    exports.empty = apolloLink.empty;
    exports.from = apolloLink.from;
    exports.split = apolloLink.split;
    exports.concat = apolloLink.concat;
    exports.ApolloLink = apolloLink.ApolloLink;
    exports.ɵb = apolloAngular.ɵb;
    exports.ɵa = apolloAngular.ɵa;
    exports.Apollo = apolloAngular.Apollo;
    exports.ApolloBase = apolloAngular.ApolloBase;
    exports.QueryRef = apolloAngular.QueryRef;
    exports.Query = apolloAngular.Query;
    exports.Mutation = apolloAngular.Mutation;
    exports.Subscription = apolloAngular.Subscription;
    exports.SelectPipe = apolloAngular.SelectPipe;
    exports.ApolloModule = apolloAngular.ApolloModule;
    exports.APOLLO_OPTIONS = apolloAngular.APOLLO_OPTIONS;
    exports.InMemoryCache = apolloCacheInmemory.InMemoryCache;
    exports.defaultDataIdFromObject = apolloCacheInmemory.defaultDataIdFromObject;
    exports.assertIdValue = apolloCacheInmemory.assertIdValue;
    exports.StoreReader = apolloCacheInmemory.StoreReader;
    exports.enhanceErrorWithDocument = apolloCacheInmemory.enhanceErrorWithDocument;
    exports.WriteError = apolloCacheInmemory.WriteError;
    exports.StoreWriter = apolloCacheInmemory.StoreWriter;
    exports.HeuristicFragmentMatcher = apolloCacheInmemory.HeuristicFragmentMatcher;
    exports.IntrospectionFragmentMatcher = apolloCacheInmemory.IntrospectionFragmentMatcher;
    exports.defaultNormalizedCacheFactory = apolloCacheInmemory.defaultNormalizedCacheFactory;
    exports.ObjectCache = apolloCacheInmemory.ObjectCache;
    exports.record = apolloCacheInmemory.record;
    exports.RecordingCache = apolloCacheInmemory.RecordingCache;
    exports.gql = graphqlTag;
    exports.printAST = apolloClient.printAST;
    exports.ObservableQuery = apolloClient.ObservableQuery;
    exports.NetworkStatus = apolloClient.NetworkStatus;
    exports.ApolloError = apolloClient.ApolloError;
    exports.ApolloClient = apolloClient.ApolloClient;
    exports.FetchType = apolloClient.FetchType;
    exports.APOLLO_BOOST_CONFIG = APOLLO_BOOST_CONFIG;
    exports.ApolloBoost = ApolloBoost;
    exports.ApolloBoostModule = ApolloBoostModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,