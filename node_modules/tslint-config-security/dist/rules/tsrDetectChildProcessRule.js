"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var node_kind_1 = require("../node-kind");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new RuleWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var RuleWalker = (function (_super) {
    tslib_1.__extends(RuleWalker, _super);
    function RuleWalker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.names = [];
        return _this;
    }
    RuleWalker.prototype.visitCallExpression = function (node) {
        var expression = node.expression;
        var firstArgument = node.arguments && node.arguments[0];
        if (firstArgument &&
            expression &&
            node_kind_1.stringLiteralKinds.includes(firstArgument.kind) &&
            firstArgument.text === 'child_process' &&
            expression.getText() === 'require') {
            var parent = node.parent;
            this.names.length = 0;
            if (parent && parent.kind === ts.SyntaxKind.VariableDeclaration) {
                this.names.push(parent.name.getText());
            }
            this.addFailureAtNode(node, 'Found require("child_process")');
        }
        _super.prototype.visitCallExpression.call(this, node);
    };
    RuleWalker.prototype.visitPropertyAccessExpression = function (node) {
        var name = node.name, expression = node.expression;
        if (name && expression && name.getText() === 'exec' && this.names.indexOf(expression.getText()) >= 0) {
            this.addFailureAtNode(node, 'Found child_process.exec() with non StringLiteral first argument');
        }
        _super.prototype.visitPropertyAccessExpression.call(this, node);
    };
    return RuleWalker;
}(Lint.RuleWalker));
