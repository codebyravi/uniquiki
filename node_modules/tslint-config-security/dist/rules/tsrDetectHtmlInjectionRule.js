"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var node_kind_1 = require("../node-kind");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new RuleWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var unsafeDocumentHtmlMethods = ['writeln', 'write'];
var unsafeElementHtmlMethods = ['insertAdjacentHTML'];
var unsafeElementHtmlProps = ['outerHTML', 'innerHTML'];
var RuleWalker = (function (_super) {
    tslib_1.__extends(RuleWalker, _super);
    function RuleWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RuleWalker.prototype.visitPropertyAccessExpression = function (node) {
        var expression = node.expression;
        var name = node.name;
        var parent = node.parent;
        var firstArgument = parent && parent.arguments && parent.arguments[0];
        if (expression && name && firstArgument && !node_kind_1.stringLiteralKinds.includes(firstArgument.kind)) {
            var method = name.text;
            if (expression.text === 'document' && unsafeDocumentHtmlMethods.includes(method)) {
                this.addFailureAtNode(parent, "Found document." + method + " with non-literal argument");
            }
            else if (unsafeElementHtmlMethods.includes(method)) {
                this.addFailureAtNode(parent, "Found Element." + method + " with non-literal argument");
            }
        }
        _super.prototype.visitPropertyAccessExpression.call(this, node);
    };
    RuleWalker.prototype.visitBinaryExpression = function (node) {
        var left = node.left;
        var right = node.right;
        if (node.operatorToken &&
            node.operatorToken.kind === ts.SyntaxKind.EqualsToken &&
            left &&
            left.kind === ts.SyntaxKind.PropertyAccessExpression &&
            left.name &&
            right &&
            !node_kind_1.stringLiteralKinds.includes(right.kind) &&
            unsafeElementHtmlProps.includes(left.name.text)) {
            this.addFailureAtNode(node, "Found Element." + left.name.text + " with non-literal value");
        }
        _super.prototype.visitBinaryExpression.call(this, node);
    };
    return RuleWalker;
}(Lint.RuleWalker));
