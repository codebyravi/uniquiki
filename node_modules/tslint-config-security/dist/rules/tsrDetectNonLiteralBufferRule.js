"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var node_kind_1 = require("../node-kind");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new RuleWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var RuleWalker = (function (_super) {
    tslib_1.__extends(RuleWalker, _super);
    function RuleWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RuleWalker.prototype.visitNewExpression = function (node) {
        var expression = node.expression;
        var firstArgument = node.arguments && node.arguments[0];
        if (expression &&
            expression.text === 'Buffer' &&
            firstArgument &&
            !node_kind_1.stringLiteralKinds.includes(firstArgument.kind)) {
            this.addFailureAtNode(node, 'Found new Buffer with non-literal argument');
        }
        _super.prototype.visitNewExpression.call(this, node);
    };
    return RuleWalker;
}(Lint.RuleWalker));
