"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var readMethods = [
    'readUInt8',
    'readUInt16LE',
    'readUInt16BE',
    'readUInt32LE',
    'readUInt32BE',
    'readInt8',
    'readInt16LE',
    'readInt16BE',
    'readInt32LE',
    'readInt32BE',
    'readFloatLE',
    'readFloatBE',
    'readDoubleL',
    'readDoubleBE'
];
var writeMethods = [
    'writeUInt8',
    'writeUInt16LE',
    'writeUInt16BE',
    'writeUInt32LE',
    'writeUInt32BE',
    'writeInt8',
    'writeInt16LE',
    'writeInt16BE',
    'writeInt32LE',
    'writeInt32BE',
    'writeFloatLE',
    'writeFloatBE',
    'writeDoubleLE',
    'writeDoubleBE'
];
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new RuleWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var RuleWalker = (function (_super) {
    tslib_1.__extends(RuleWalker, _super);
    function RuleWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RuleWalker.prototype.visitPropertyAccessExpression = function (node) {
        var name = node.name;
        var parent = node.parent;
        if (parent && parent.kind === ts.SyntaxKind.CallExpression && node.expression && name) {
            var methodName = name.getText();
            var argumentIndex = -1;
            if (readMethods.indexOf(methodName) !== -1) {
                argumentIndex = 1;
            }
            else if (writeMethods.indexOf(methodName) !== -1) {
                argumentIndex = 2;
            }
            if (argumentIndex !== -1 &&
                parent.arguments &&
                parent.arguments[argumentIndex] &&
                parent.arguments[argumentIndex].kind === ts.SyntaxKind.TrueKeyword) {
                this.addFailureAtNode(node, "Found Buffer." + methodName + " with noAssert flag set true");
            }
        }
        _super.prototype.visitPropertyAccessExpression.call(this, node);
    };
    return RuleWalker;
}(Lint.RuleWalker));
