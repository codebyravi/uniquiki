"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var node_kind_1 = require("../node-kind");
var keywordMask = new RegExp('^.*((' + ['password', 'secret', 'api', 'apiKey', 'token', 'auth', 'pass', 'hash'].join(')|(') + ')).*$', 'im');
function containsKeyword(node) {
    switch (node.kind) {
        case ts.SyntaxKind.CallExpression:
            return containsKeywordCallExpression(node);
        case ts.SyntaxKind.ElementAccessExpression:
            return containsKeywordElementAccessExpression(node);
        case ts.SyntaxKind.Identifier:
            return containsKeywordIdentifier(node);
        case ts.SyntaxKind.PropertyAccessExpression:
            return containsKeywordPropertyAccessExpression(node);
        default:
            return false;
    }
}
function containsKeywordCallExpression(node) {
    return containsKeyword(node.expression);
}
function containsKeywordElementAccessExpression(node) {
    if (node_kind_1.stringLiteralKinds.includes(node.argumentExpression.kind)) {
        var argumentExpression = node.argumentExpression;
        return containsKeyword(node.expression) || Boolean(keywordMask.test(argumentExpression.text));
    }
    return containsKeyword(node.expression) || containsKeyword(node.argumentExpression);
}
function containsKeywordIdentifier(node) {
    return Boolean(keywordMask.test(node.text));
}
function containsKeywordPropertyAccessExpression(node) {
    return containsKeyword(node.expression) || containsKeyword(node.name);
}
function isVulnerableType(node) {
    if (node_kind_1.stringLiteralKinds.includes(node.kind)) {
        return true;
    }
    switch (node.kind) {
        case ts.SyntaxKind.CallExpression:
            return isVulnerableCallExpression(node);
        case ts.SyntaxKind.ElementAccessExpression:
            return isVulnerableElementAccessExpression(node);
        case ts.SyntaxKind.Identifier:
            return true;
        case ts.SyntaxKind.PropertyAccessExpression:
            return isVulnerablePropertyAccessExpression(node);
        default:
            return false;
    }
}
function isVulnerableCallExpression(node) {
    return isVulnerableType(node.expression);
}
function isVulnerableElementAccessExpression(node) {
    return isVulnerableType(node.expression) || isVulnerableType(node.argumentExpression);
}
function isVulnerablePropertyAccessExpression(node) {
    return isVulnerableType(node.expression) || isVulnerableType(node.name);
}
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new RuleWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var RuleWalker = (function (_super) {
    tslib_1.__extends(RuleWalker, _super);
    function RuleWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RuleWalker.prototype.visitBinaryExpression = function (node) {
        var operatorTokenKind = node.operatorToken.kind;
        if (operatorTokenKind === ts.SyntaxKind.EqualsEqualsToken ||
            operatorTokenKind === ts.SyntaxKind.EqualsEqualsEqualsToken ||
            operatorTokenKind === ts.SyntaxKind.ExclamationEqualsToken ||
            operatorTokenKind === ts.SyntaxKind.ExclamationEqualsEqualsToken) {
            if (isVulnerableType(node.left) && isVulnerableType(node.right)) {
                if (containsKeyword(node.left)) {
                    this.addFailureAtNode(node, 'Potential timing attack on the left side of expression');
                }
                else if (containsKeyword(node.right)) {
                    this.addFailureAtNode(node, 'Potential timing attack on the right side of expression');
                }
            }
        }
        _super.prototype.visitBinaryExpression.call(this, node);
    };
    return RuleWalker;
}(Lint.RuleWalker));
