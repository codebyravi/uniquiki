"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var is_sql_query_1 = require("../is-sql-query");
var node_kind_1 = require("../node-kind");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new RuleWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var generalErrorMessage = 'Found possible SQL injection';
var RuleWalker = (function (_super) {
    tslib_1.__extends(RuleWalker, _super);
    function RuleWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RuleWalker.prototype.visitTemplateExpression = function (node) {
        var parent = node.parent;
        if ((!parent || parent.kind !== ts.SyntaxKind.TaggedTemplateExpression) &&
            is_sql_query_1.isSqlQuery(node.getText().slice(1, -1))) {
            this.addFailureAtNode(node, generalErrorMessage);
        }
        _super.prototype.visitTemplateExpression.call(this, node);
    };
    RuleWalker.prototype.visitBinaryExpression = function (node) {
        var left = node.left;
        if (left && node_kind_1.stringLiteralKinds.includes(left.kind) && is_sql_query_1.isSqlQuery(left.getText().slice(1, -1))) {
            this.addFailureAtNode(left, generalErrorMessage);
        }
        _super.prototype.visitBinaryExpression.call(this, node);
    };
    return RuleWalker;
}(Lint.RuleWalker));
